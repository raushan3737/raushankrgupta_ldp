2023-06-08 14:51:50 => [logging] [DEBUG] Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-06-08 14:51:50 => [IntegratorServiceImpl] [DEBUG] Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-06-08 14:51:50 => [IntegratorServiceImpl] [DEBUG] Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [jdbc] -> [org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [jta] -> [org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorBuilderImpl]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [org.hibernate.transaction.JDBCTransactionFactory] -> [org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [org.hibernate.transaction.JTATransactionFactory] -> [org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorBuilderImpl]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [org.hibernate.transaction.CMTTransactionFactory] -> [org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorBuilderImpl]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.query.sqm.mutation.spi.SqmMultiTableMutationStrategy] : [cte] -> [org.hibernate.query.sqm.mutation.internal.cte.CteMutationStrategy]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.query.sqm.mutation.spi.SqmMultiTableMutationStrategy] : [global_temporary] -> [org.hibernate.query.sqm.mutation.internal.temptable.GlobalTemporaryTableMutationStrategy]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.query.sqm.mutation.spi.SqmMultiTableMutationStrategy] : [local_temporary] -> [org.hibernate.query.sqm.mutation.internal.temptable.LocalTemporaryTableMutationStrategy]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.query.sqm.mutation.spi.SqmMultiTableMutationStrategy] : [persistent] -> [org.hibernate.query.sqm.mutation.internal.temptable.PersistentTableMutationStrategy]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [default] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [jpa] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [legacy-jpa] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [legacy-hbm] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [component-path] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.id.enhanced.ImplicitDatabaseObjectNamingStrategy] : [standard] -> [org.hibernate.id.enhanced.StandardNamingStrategy]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.id.enhanced.ImplicitDatabaseObjectNamingStrategy] : [single] -> [org.hibernate.id.enhanced.SingleNamingStrategy]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.id.enhanced.ImplicitDatabaseObjectNamingStrategy] : [legacy] -> [org.hibernate.id.enhanced.LegacyNamingStrategy]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.relational.ColumnOrderingStrategy] : [default] -> [org.hibernate.boot.model.relational.ColumnOrderingStrategyStandard]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.relational.ColumnOrderingStrategy] : [legacy] -> [org.hibernate.boot.model.relational.ColumnOrderingStrategyLegacy]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.cache.spi.CacheKeysFactory] : [default] -> [org.hibernate.cache.internal.DefaultCacheKeysFactory]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.cache.spi.CacheKeysFactory] : [simple] -> [org.hibernate.cache.internal.SimpleCacheKeysFactory]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.type.format.FormatMapper] : [jackson] -> [org.hibernate.type.format.jackson.JacksonJsonFormatMapper]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.type.format.FormatMapper] : [jsonb] -> [org.hibernate.type.format.jakartajson.JsonBJsonFormatMapper]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.type.format.FormatMapper] : [jackson-xml] -> [org.hibernate.type.format.jackson.JacksonXmlFormatMapper]
2023-06-08 14:51:50 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.type.format.FormatMapper] : [jaxb] -> [org.hibernate.type.format.jaxb.JaxbXmlFormatMapper]
2023-06-08 14:51:50 => [Version] [INFO] HHH000412: Hibernate ORM core version 6.2.3.Final
2023-06-08 14:51:50 => [Environment] [DEBUG] HHH000206: hibernate.properties not found
2023-06-08 14:51:50 => [Environment] [INFO] HHH000406: Using bytecode reflection optimizer
2023-06-08 14:51:50 => [ClassLoaderServiceImpl] [TRACE] trying via [new URL("hibernate.cfg.xml")]
2023-06-08 14:51:50 => [ClassLoaderServiceImpl] [TRACE] trying via [ClassLoader.getResourceAsStream("hibernate.cfg.xml")]
2023-06-08 14:51:50 => [LocalXmlResourceResolver] [TRACE] In resolveEntity(-//Hibernate/Hibernate Configuration DTD 3.0//EN, http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd, null, null)
2023-06-08 14:51:50 => [LocalXmlResourceResolver] [DEBUG] Checking public/system identifiers `-//Hibernate/Hibernate Configuration DTD 3.0//EN`/`http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd` as DTD references
2023-06-08 14:51:50 => [JaxbCfgProcessor] [DEBUG] cfg.xml document did not define namespaces; wrapping in custom event reader to introduce namespace information
2023-06-08 14:51:51 => [Configuration] [DEBUG] Building session factory using internal StandardServiceRegistryBuilder
2023-06-08 14:51:51 => [Configuration] [DEBUG] Building session factory using provided StandardServiceRegistry
2023-06-08 14:51:51 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.id.factory.IdentifierGeneratorFactory]
2023-06-08 14:51:51 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.config.spi.ConfigurationService]
2023-06-08 14:51:51 => [factory] [DEBUG] Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-06-08 14:51:51 => [factory] [DEBUG] Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-06-08 14:51:51 => [factory] [DEBUG] Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-06-08 14:51:51 => [factory] [DEBUG] Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-06-08 14:51:51 => [factory] [DEBUG] Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-06-08 14:51:51 => [factory] [DEBUG] Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-06-08 14:51:51 => [factory] [DEBUG] Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-06-08 14:51:51 => [factory] [DEBUG] Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-06-08 14:51:51 => [factory] [DEBUG] Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-06-08 14:51:51 => [factory] [DEBUG] Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-06-08 14:51:51 => [factory] [DEBUG] Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-06-08 14:51:51 => [factory] [DEBUG] Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-06-08 14:51:51 => [factory] [DEBUG] Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-06-08 14:51:51 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider]
2023-06-08 14:51:51 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.cache.spi.RegionFactory]
2023-06-08 14:51:51 => [RegionFactoryInitiator] [DEBUG] Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-06-08 14:51:51 => [RegionFactoryInitiator] [DEBUG] Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@79dc5318
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@79dc5318
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@79dc5318
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@8e50104
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@8e50104
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@37e4d7bb
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@37e4d7bb
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6f7923a5
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6f7923a5
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration byte -> org.hibernate.type.BasicTypeReference@74a6f9c1
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration byte -> org.hibernate.type.BasicTypeReference@74a6f9c1
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@74a6f9c1
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration binary -> org.hibernate.type.BasicTypeReference@54eb2b70
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@54eb2b70
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration [B -> org.hibernate.type.BasicTypeReference@54eb2b70
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@45a37759
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@45a37759
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration image -> org.hibernate.type.BasicTypeReference@63611043
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration blob -> org.hibernate.type.BasicTypeReference@20ca951f
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@20ca951f
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@2d778add
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@73302995
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration short -> org.hibernate.type.BasicTypeReference@1838ccb8
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration short -> org.hibernate.type.BasicTypeReference@1838ccb8
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@1838ccb8
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration integer -> org.hibernate.type.BasicTypeReference@6c2ed0cd
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration int -> org.hibernate.type.BasicTypeReference@6c2ed0cd
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6c2ed0cd
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration long -> org.hibernate.type.BasicTypeReference@7d9e8ef7
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration long -> org.hibernate.type.BasicTypeReference@7d9e8ef7
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@7d9e8ef7
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration float -> org.hibernate.type.BasicTypeReference@f107c50
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration float -> org.hibernate.type.BasicTypeReference@f107c50
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@f107c50
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration double -> org.hibernate.type.BasicTypeReference@51133c06
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration double -> org.hibernate.type.BasicTypeReference@51133c06
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@51133c06
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@4b213651
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@4b213651
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@4241e0f4
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@4241e0f4
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration character -> org.hibernate.type.BasicTypeReference@4ebff610
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration char -> org.hibernate.type.BasicTypeReference@4ebff610
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4ebff610
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@60410cd
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration string -> org.hibernate.type.BasicTypeReference@44d52de2
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@44d52de2
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@95e33cc
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration characters -> org.hibernate.type.BasicTypeReference@38604b81
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@38604b81
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration [C -> org.hibernate.type.BasicTypeReference@38604b81
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@1e44b638
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration text -> org.hibernate.type.BasicTypeReference@7393222f
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@babafc2
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration clob -> org.hibernate.type.BasicTypeReference@31add175
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@31add175
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@ae3540e
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@ae3540e
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@600b9d27
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@3688eb5b
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@69f1a286
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@7922d892
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@457c9034
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@345f69f3
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@50de186c
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@50de186c
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@3f57bcad
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@3f57bcad
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@1e8b7643
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@1e8b7643
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@51549490
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@51549490
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@71e9ebae
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@71e9ebae
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@73d983ea
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@36a5cabc
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@432038ec
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@432038ec
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@7daa0fbd
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@42530531
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5a3bc7ed
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@181e731e
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@181e731e
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@35645047
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6f44a157
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration date -> org.hibernate.type.BasicTypeReference@6bc407fd
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@6bc407fd
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration time -> org.hibernate.type.BasicTypeReference@291f18
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@291f18
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@17d88132
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@17d88132
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@17d88132
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@5ddcc487
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@5ddcc487
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@5ddcc487
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@16eccb2e
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@5ef5c734
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration instant -> org.hibernate.type.BasicTypeReference@d771cc9
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@d771cc9
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@36b4091c
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@36b4091c
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@36b4091c
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@4671115f
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@36cda2c2
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration class -> org.hibernate.type.BasicTypeReference@3697186
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3697186
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration currency -> org.hibernate.type.BasicTypeReference@1583741e
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@1583741e
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@1583741e
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration locale -> org.hibernate.type.BasicTypeReference@5b367418
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@5b367418
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@36060e
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@36060e
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@481ba2cf
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@481ba2cf
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@46b61c56
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@46b61c56
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration url -> org.hibernate.type.BasicTypeReference@2e48362c
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@2e48362c
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@1efe439d
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration object -> org.hibernate.type.JavaObjectType@63f259c3
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@63f259c3
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration null -> org.hibernate.type.NullType@27216cd
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@8576fa0
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@7582ff54
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@67545b57
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@6c2c1385
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@5f354bcf
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@3daf7722
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@78641d23
2023-06-08 14:51:51 => [SqmFunctionRegistry] [TRACE] SqmFunctionRegistry created
2023-06-08 14:51:51 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.boot.cfgxml.spi.CfgXmlAccessService]
2023-06-08 14:51:51 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]
2023-06-08 14:51:51 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.dialect.spi.DialectFactory]
2023-06-08 14:51:51 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.dialect.spi.DialectResolver]
2023-06-08 14:51:51 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider]
2023-06-08 14:51:51 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.ConnectionProvider]
2023-06-08 14:51:51 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider]
2023-06-08 14:51:51 => [pooling] [WARN] HHH10001002: Using built-in connection pool (not intended for production use)
2023-06-08 14:51:51 => [pooling] [INFO] HHH10001005: Loaded JDBC driver class: com.mysql.cj.jdbc.Driver
2023-06-08 14:51:51 => [pooling] [INFO] HHH10001012: Connecting with JDBC URL [jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC]
2023-06-08 14:51:51 => [pooling] [INFO] HHH10001001: Connection properties: {password=hbstudent, user=hbstudent}
2023-06-08 14:51:51 => [pooling] [INFO] HHH10001003: Autocommit mode: false
2023-06-08 14:51:51 => [pooling] [DEBUG] Initializing Connection pool with 1 Connections
2023-06-08 14:51:51 => [pooling] [INFO] HHH10001115: Connection pool size: 1 (min=1)
2023-06-08 14:51:51 => [JdbcEnvironmentInitiator] [DEBUG] Database ->
       name : MySQL
    version : 8.0.33
      major : 8
      minor : 0
2023-06-08 14:51:51 => [JdbcEnvironmentInitiator] [DEBUG] Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.28 (Revision: 7ff2161da3899f379fb3171b6538b191b1c5c7e2)
      major : 8
      minor : 0
2023-06-08 14:51:51 => [JdbcEnvironmentInitiator] [DEBUG] JDBC version : 4.2
2023-06-08 14:51:51 => [dialect] [DEBUG] HHH035001: Using dialect: org.hibernate.dialect.MySQLDialect, version: 8.0.33
2023-06-08 14:51:51 => [IdentifierHelperBuilder] [DEBUG] JDBC driver metadata reported database stores quoted identifiers in more than one case
2023-06-08 14:51:51 => [IdentifierHelperBuilder] [DEBUG] IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2023-06-08 14:51:51 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [hb_student_tracker]
2023-06-08 14:51:51 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [null]
2023-06-08 14:51:51 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.spi.JdbcServices]
2023-06-08 14:51:51 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.spi.SqlStatementLogger]
2023-06-08 14:51:51 => [DdlTypeRegistry] [DEBUG] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5f4d427e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6e521c1e)
2023-06-08 14:51:51 => [DdlTypeRegistry] [DEBUG] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@224b4d61) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5d5d9e5)
2023-06-08 14:51:51 => [DdlTypeRegistry] [DEBUG] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@303e3593) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4ef27d66)
2023-06-08 14:51:51 => [DdlTypeRegistry] [DEBUG] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@362a019c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1d9bec4d)
2023-06-08 14:51:51 => [DdlTypeRegistry] [DEBUG] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5c48c0c0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@10c8f62)
2023-06-08 14:51:51 => [DdlTypeRegistry] [DEBUG] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@674c583e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@25f7391e)
2023-06-08 14:51:51 => [DdlTypeRegistry] [DEBUG] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3f23a3a0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5ab14cb9)
2023-06-08 14:51:51 => [DdlTypeRegistry] [DEBUG] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5fb97279) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@439a8f59)
2023-06-08 14:51:51 => [DdlTypeRegistry] [DEBUG] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@61861a29) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@31024624)
2023-06-08 14:51:51 => [JdbcTypeRegistry] [DEBUG] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-06-08 14:51:51 => [JdbcTypeRegistry] [DEBUG] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-06-08 14:51:51 => [JdbcTypeRegistry] [DEBUG] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-06-08 14:51:51 => [JdbcTypeRegistry] [DEBUG] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-06-08 14:51:51 => [JdbcTypeRegistry] [DEBUG] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration null -> org.hibernate.type.NullType@1fc0053e
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@27216cd`
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,3003)
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,3003)
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,3003)
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,3003)
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,3003)
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,3003)
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration org.hibernate.type.OffsetTimeType -> basicType@3(java.time.OffsetTime,3007)
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetTime -> basicType@3(java.time.OffsetTime,3007)
2023-06-08 14:51:51 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.OffsetTime -> basicType@3(java.time.OffsetTime,3007)
2023-06-08 14:51:51 => [TypeConfiguration$Scope] [DEBUG] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@517bd097] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@142eef62]
2023-06-08 14:51:51 => [Namespace] [DEBUG] Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-06-08 14:51:52 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.resource.beans.spi.ManagedBeanRegistry]
2023-06-08 14:51:52 => [EntityBinder] [DEBUG] Binding entity from annotated class: com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:51:52 => [EntityBinder] [DEBUG] Import with entity name Student
2023-06-08 14:51:52 => [InFlightMetadataCollectorImpl] [TRACE] Import: Student -> com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:51:52 => [InFlightMetadataCollectorImpl] [TRACE] Import: com.zemoso.hibernate.demo.entity.Student -> com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:51:52 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [student]
2023-06-08 14:51:52 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [student]
2023-06-08 14:51:52 => [EntityBinder] [DEBUG] Bind entity com.zemoso.hibernate.demo.entity.Student on table student
2023-06-08 14:51:52 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [DTYPE]
2023-06-08 14:51:52 => [AnnotatedColumn] [DEBUG] Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-06-08 14:51:52 => [PropertyBinder] [TRACE] Processing annotations of com.zemoso.hibernate.demo.entity.Student.id
2023-06-08 14:51:52 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [id]
2023-06-08 14:51:52 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [id]
2023-06-08 14:51:52 => [AnnotatedColumn] [DEBUG] Binding column: AnnotatedColumn(column='id')
2023-06-08 14:51:52 => [ClassLoaderAccessImpl] [DEBUG] Not known whether passed class name [com.zemoso.hibernate.demo.entity.Student] is safe
2023-06-08 14:51:52 => [ClassLoaderAccessImpl] [DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:51:52 => [PropertyBinder] [DEBUG] MetadataSourceProcessor property id with lazy=false
2023-06-08 14:51:52 => [AbstractPropertyHolder] [DEBUG] Attempting to locate auto-apply AttributeConverter for property [com.zemoso.hibernate.demo.entity.Student:id]
2023-06-08 14:51:52 => [BasicValueBinder] [DEBUG] building BasicValue for id
2023-06-08 14:51:52 => [BasicValue] [DEBUG] Skipping column re-registration: student.id
2023-06-08 14:51:52 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [id]
2023-06-08 14:51:52 => [PropertyBinder] [DEBUG] Building property id
2023-06-08 14:51:52 => [PropertyBinder] [TRACE] Cascading id with null
2023-06-08 14:51:52 => [BinderHelper] [DEBUG] #makeIdGenerator(BasicValue([Column(id)]), id, identity, , ...)
2023-06-08 14:51:52 => [PropertyBinder] [TRACE] Bind @Id on id
2023-06-08 14:51:52 => [PropertyBinder] [TRACE] Processing annotations of com.zemoso.hibernate.demo.entity.Student.email
2023-06-08 14:51:52 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [email]
2023-06-08 14:51:52 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [email]
2023-06-08 14:51:52 => [AnnotatedColumn] [DEBUG] Binding column: AnnotatedColumn(column='email')
2023-06-08 14:51:52 => [PropertyBinder] [DEBUG] MetadataSourceProcessor property email with lazy=false
2023-06-08 14:51:52 => [AbstractPropertyHolder] [DEBUG] Attempting to locate auto-apply AttributeConverter for property [com.zemoso.hibernate.demo.entity.Student:email]
2023-06-08 14:51:52 => [BasicValueBinder] [DEBUG] building BasicValue for email
2023-06-08 14:51:52 => [BasicValue] [DEBUG] Skipping column re-registration: student.email
2023-06-08 14:51:52 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [email]
2023-06-08 14:51:52 => [PropertyBinder] [DEBUG] Building property email
2023-06-08 14:51:52 => [PropertyBinder] [TRACE] Cascading email with null
2023-06-08 14:51:52 => [PropertyBinder] [TRACE] Processing annotations of com.zemoso.hibernate.demo.entity.Student.firstName
2023-06-08 14:51:52 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [first_name]
2023-06-08 14:51:52 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [first_name]
2023-06-08 14:51:52 => [AnnotatedColumn] [DEBUG] Binding column: AnnotatedColumn(column='first_name')
2023-06-08 14:51:52 => [PropertyBinder] [DEBUG] MetadataSourceProcessor property firstName with lazy=false
2023-06-08 14:51:52 => [AbstractPropertyHolder] [DEBUG] Attempting to locate auto-apply AttributeConverter for property [com.zemoso.hibernate.demo.entity.Student:firstName]
2023-06-08 14:51:52 => [BasicValueBinder] [DEBUG] building BasicValue for firstName
2023-06-08 14:51:52 => [BasicValue] [DEBUG] Skipping column re-registration: student.first_name
2023-06-08 14:51:52 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [first_name]
2023-06-08 14:51:52 => [PropertyBinder] [DEBUG] Building property firstName
2023-06-08 14:51:52 => [PropertyBinder] [TRACE] Cascading firstName with null
2023-06-08 14:51:52 => [PropertyBinder] [TRACE] Processing annotations of com.zemoso.hibernate.demo.entity.Student.lastName
2023-06-08 14:51:52 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [last_name]
2023-06-08 14:51:52 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [last_name]
2023-06-08 14:51:52 => [AnnotatedColumn] [DEBUG] Binding column: AnnotatedColumn(column='last_name')
2023-06-08 14:51:52 => [PropertyBinder] [DEBUG] MetadataSourceProcessor property lastName with lazy=false
2023-06-08 14:51:52 => [AbstractPropertyHolder] [DEBUG] Attempting to locate auto-apply AttributeConverter for property [com.zemoso.hibernate.demo.entity.Student:lastName]
2023-06-08 14:51:52 => [BasicValueBinder] [DEBUG] building BasicValue for lastName
2023-06-08 14:51:52 => [BasicValue] [DEBUG] Skipping column re-registration: student.last_name
2023-06-08 14:51:52 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [last_name]
2023-06-08 14:51:52 => [PropertyBinder] [DEBUG] Building property lastName
2023-06-08 14:51:52 => [PropertyBinder] [TRACE] Cascading lastName with null
2023-06-08 14:51:52 => [BasicValueBinder] [DEBUG] Starting `BasicValueBinder#fillSimpleValue` for id
2023-06-08 14:51:52 => [BasicValueBinder] [DEBUG] Starting `BasicValueBinder#fillSimpleValue` for email
2023-06-08 14:51:52 => [BasicValueBinder] [DEBUG] Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-06-08 14:51:52 => [BasicValueBinder] [DEBUG] Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-06-08 14:51:52 => [PrimaryKey] [DEBUG] Forcing column [id] to be non-null as it is part of the primary key for table [student]
2023-06-08 14:51:52 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.boot.spi.SessionFactoryBuilderService]
2023-06-08 14:51:52 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider]
2023-06-08 14:51:52 => [BatchFetchStyle] [TRACE] Interpreting BatchFetchStyle from setting : null
2023-06-08 14:51:52 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder]
2023-06-08 14:51:52 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.bytecode.spi.BytecodeProvider]
2023-06-08 14:51:52 => [BytecodeProviderInitiator] [INFO] HHH000021: Bytecode provider name : bytebuddy
2023-06-08 14:51:52 => [SessionFactoryImpl] [DEBUG] Building session factory
2023-06-08 14:51:52 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.service.spi.SessionFactoryServiceRegistryFactory]
2023-06-08 14:51:52 => [SessionFactoryServiceRegistryImpl] [DEBUG] EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-06-08 14:51:52 => [SessionFactoryImpl] [DEBUG] Instantiating SessionFactory with settings: {dialect=org.hibernate.dialect.MySQLDialect, java.specification.version=17, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQLDialect, java.class.path=C:\Users\Raushan Kumar Gupta\Desktop\zemoso\zemoso-work\raushankrgupta_ldp\spring-hibernate-poc\spring-hibernate\spring-hibernate-demo\target\classes;C:\Users\Raushan Kumar Gupta\.m2\repository\org\springframework\spring-context\6.0.9\spring-context-6.0.9.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\springframework\spring-aop\6.0.9\spring-aop-6.0.9.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\springframework\spring-beans\6.0.9\spring-beans-6.0.9.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\springframework\spring-core\6.0.9\spring-core-6.0.9.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\springframework\spring-jcl\6.0.9\spring-jcl-6.0.9.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\springframework\spring-expression\6.0.9\spring-expression-6.0.9.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\javax\annotation\javax.annotation-api\1.3.2\javax.annotation-api-1.3.2.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\hibernate\orm\hibernate-core\6.2.3.Final\hibernate-core-6.2.3.Final.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\jboss\logging\jboss-logging\3.5.0.Final\jboss-logging-3.5.0.Final.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\hibernate\common\hibernate-commons-annotations\6.0.6.Final\hibernate-commons-annotations-6.0.6.Final.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\io\smallrye\jandex\3.0.5\jandex-3.0.5.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\net\bytebuddy\byte-buddy\1.12.18\byte-buddy-1.12.18.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.0\jakarta.xml.bind-api-4.0.0.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.0\jakarta.activation-api-2.1.0.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.2\jaxb-runtime-4.0.2.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.2\jaxb-core-4.0.2.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\eclipse\angus\angus-activation\2.0.0\angus-activation-2.0.0.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\glassfish\jaxb\txw2\4.0.2\txw2-4.0.2.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.1\istack-commons-runtime-4.1.1.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\antlr\antlr4-runtime\4.10.1\antlr4-runtime-4.10.1.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\mysql\mysql-connector-java\8.0.28\mysql-connector-java-8.0.28.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\com\google\protobuf\protobuf-java\3.11.4\protobuf-java-3.11.4.jar, java.vm.vendor=Amazon.com Inc., sun.arch.data.model=64, user.variant=, java.vendor.url=https://aws.amazon.com/corretto/, user.timezone=Asia/Calcutta, java.vm.specification.version=17, os.name=Windows 11, current_session_context_class=thread, sun.java.launcher=SUN_STANDARD, user.country=IN, sun.boot.library.path=C:\Users\Raushan Kumar Gupta\.jdks\corretto-17.0.7\bin, sun.java.command=com.zemoso.hibernate.demo.DeleteStudentDemo, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\Raushan Kumar Gupta, user.language=en, java.specification.vendor=Oracle Corporation, java.version.date=2023-04-18, java.home=C:\Users\Raushan Kumar Gupta\.jdks\corretto-17.0.7, file.separator=\, java.vm.compressedOopsMode=32-bit, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, user.script=, connection.password=hbstudent, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=17.0.7+7-LTS, user.name=Raushan Kumar Gupta, path.separator=;, hibernate.connection.username=****, os.version=10.0, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC, connection.pool_size=1, file.encoding=UTF-8, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=true, java.vendor.version=Corretto-17.0.7.7.1, hibernate.current_session_context_class=thread, show_sql=true, hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver, java.vendor.url.bug=https://github.com/corretto/corretto-17/issues/, java.io.tmpdir=C:\Users\RAUSHA~1\AppData\Local\Temp\, java.version=17.0.7, user.dir=C:\Users\Raushan Kumar Gupta\Desktop\zemoso\zemoso-work\raushankrgupta_ldp\spring-hibernate-poc\spring-hibernate\spring-hibernate-demo, os.arch=amd64, connection.username=hbstudent, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, sun.os.patch.level=, connection.driver_class=com.mysql.cj.jdbc.Driver, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@35fb22a9, native.encoding=Cp1252, java.library.path=C:\Users\Raushan Kumar Gupta\.jdks\corretto-17.0.7\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Microsoft\jdk-11.0.16.101-hotspot\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Users\Raushan Kumar Gupta\AppData\Local\Android\Sdk\platform-tools;C:\Program Files\nodejs\;C:\maven\bin;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\Raushan Kumar Gupta\AppData\Local\Programs\Python\Python311\Scripts\;C:\Users\Raushan Kumar Gupta\AppData\Local\Programs\Python\Python311\;C:\Users\Raushan Kumar Gupta\AppData\Local\Microsoft\WindowsApps;C:\MinGW\bin;C:\Users\Raushan Kumar Gupta\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\Raushan Kumar Gupta\AppData\Roaming\npm;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.1\bin;;., java.vendor=Amazon.com Inc., java.vm.info=mixed mode, sharing, java.vm.version=17.0.7+7-LTS, hibernate.bytecode.use_reflection_optimizer=true, sun.io.unicode.encoding=UnicodeLittle, hibernate.connection.pool_size=1, connection.url=jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC, java.class.version=61.0}
2023-06-08 14:51:52 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [null]
2023-06-08 14:51:52 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.cache.spi.CacheImplementor]
2023-06-08 14:51:52 => [SessionFactoryImpl] [DEBUG] Session factory constructed with filter configurations : {}
2023-06-08 14:51:52 => [SchemaManagementToolCoordinator] [DEBUG] No schema actions specified for contributor `orm`; doing nothing
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@aaee2a2] under count; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@27ace0b1] under every; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@664e5dee] under any; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@43f61afb] under sinh; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@713064e8] under cosh; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4fad6218] under tanh; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1bf39d06] under pi; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@68217d41] under log; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : length -> character_length
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@55e3d6c3] under position; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@3cff0139] under overlay; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@f096f37] under trim; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@39e43310] under cast; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@eb507b9] under collate; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@3ec2ecea] under extract; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@53a5e217] under ifnull; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@4f453e63] under pad; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@49c8f6e8] under str; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@2416498e] under format; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@2015b2cd] under timestampadd; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@6e1b9411] under timestampdiff; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : dateadd -> timestampadd
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : datediff -> timestampdiff
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@112d1c8e] under current_date; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3d49fd31] under current_time; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@4016ccc1] under current_timestamp; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : current date -> current_date
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : current time -> current_time
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : current timestamp -> current_timestamp
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@46cb98a3] under local_date; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3ffb3598] under local_time; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@4da9f723] under local_datetime; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3b2f4a93] under offset_datetime; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : local date -> local_date
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : local time -> local_time
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : local datetime -> local_datetime
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : offset datetime -> offset_datetime
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@213bd3d5] under instant; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : current_instant -> instant
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@7b78ed6a] under sql; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log)] under log; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@68217d41
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log2)] under log2; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(reverse)] under reverse; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.MultipatternSqmFunctionDescriptor@47447ccf] under lpad; prior registration was NamedSqmFunctionTemplate(lpad)
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.MultipatternSqmFunctionDescriptor@7afb1741] under rpad; prior registration was NamedSqmFunctionTemplate(rpad)
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(md5)] under md5; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayofweek)] under dayofweek; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayofmonth)] under dayofmonth; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : day -> dayofmonth
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayofyear)] under dayofyear; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_day)] under last_day; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(date)] under date; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(timestamp)] under timestamp; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(time)] under time; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(utc_date)] under utc_date; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(utc_time)] under utc_time; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(utc_timestamp)] under utc_timestamp; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(crc32)] under crc32; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sha1)] under sha1; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sha2)] under sha2; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sha)] under sha; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@263bbfeb] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@55e3d6c3
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@37ed010a] under trunc; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : truncate -> trunc
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@633a2e99] under bitand; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@367d2816] under bitor; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@5b84f14] under bitxor; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@5a82ebf8] under bitnot; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev)] under stddev; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(variance)] under variance; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(datediff)] under datediff; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(adddate)] under adddate; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(subdate)] under subdate; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(addtime)] under addtime; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(subtime)] under subtime; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@68fe48d7] under format; prior registration was org.hibernate.dialect.function.FormatFunction@2416498e
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(makedate)] under makedate; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(maketime)] under maketime; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@3ffb3598
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@4da9f723
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was NamedSqmFunctionTemplate(localtime)
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@379ce046] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1bf39d06
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@701bc94e] under chr; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : char -> chr
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@3d8b319e] under sysdate; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetWindowEmulation@28e19366] under rank; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetWindowEmulation@5b275174] under dense_rank; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetWindowEmulation@10ef5fa0] under percent_rank; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetWindowEmulation@244e619a] under cume_dist; prior registration was null
2023-06-08 14:51:52 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggGroupConcatEmulation@5cb042da] under listagg; prior registration was null
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] abs(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double acos(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] adddate(DATE datetime, INTEGER days)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] addtime(TIME datetime, TIME time)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Boolean any(BOOLEAN arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer ascii(STRING arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double asin(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double atan(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double avg(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] bit_and(arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer bit_length(STRING_OR_CLOB arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] bit_or(arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] bitand(arg0, arg1)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] bitnot(arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] bitor(arg0, arg1)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] bitxor(arg0, arg1)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] cast(arg as Type)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] ceiling(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Character char(INTEGER arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer character_length(STRING_OR_CLOB arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Character chr(INTEGER arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] coalesce(arg0[, arg1[, ...]])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String collate(STRING string as COLLATION collation)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String concat(STRING string0[, STRING string1[, ...]])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double cos(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double cosh(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double cot(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Long count([distinct ]{arg|*})
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer crc32(arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double cume_dist([arg0[, ...]])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Date curdate()
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Date current date
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Time current time
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Timestamp current timestamp
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Date current_date
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Instant current_instant
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Time current_time
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Timestamp current_timestamp
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Time curtime()
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Date date(arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer datediff(DATE end, DATE start)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer day(DATE arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String dayname(DATE arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer dayofmonth(DATE arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer dayofweek(DATE arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer dayofyear(DATE arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double degrees(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Long dense_rank([arg0[, ...]])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Boolean every(BOOLEAN arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double exp(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] first_valueANY value
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] floor(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String format(TEMPORAL datetime as STRING pattern)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer hour(TIME arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] ifnull(arg0, arg1)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Instant instant
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] lagANY value[, INTEGER offset[, ANY default]]
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Date last_day(DATE arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] last_valueANY value
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] leadANY value[, INTEGER offset[, ANY default]]
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String left(STRING string, INTEGER length)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer length(STRING_OR_CLOB arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String listagg(STRING arg0, STRING arg1)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double ln(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] LocalDate local date
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] LocalDateTime local datetime
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] LocalTime local time
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] LocalDate local_date
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] LocalDateTime local_datetime
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] LocalTime local_time
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Timestamp localtime
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Timestamp localtimestamp
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double log(NUMERIC arg0[, NUMERIC arg1])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double log10(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double log2(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String lower(STRING string)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String lpad(string, length[, padding])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String ltrim(STRING string[, STRING characters])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Date makedate(INTEGER year, INTEGER dayofyear)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Time maketime(INTEGER hour, INTEGER min, INTEGER sec)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] max(COMPARABLE arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String md5(arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer microsecond(TIME arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] min(COMPARABLE arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer minute(TIME arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer mod(INTEGER arg0, INTEGER arg1)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer month(DATE arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String monthname(DATE arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Timestamp now()
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] nth_valueANY value, INTEGER nth
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] nullif(arg0, arg1)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer octet_length(STRING_OR_CLOB arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] OffsetDateTime offset datetime
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] OffsetDateTime offset_datetime
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double percent_rank([arg0[, ...]])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double pi
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer position(STRING pattern in STRING string)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double power(NUMERIC arg0, NUMERIC arg1)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer quarter(DATE arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double radians(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double rand([INTEGER seed])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Long rank([arg0[, ...]])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String repeat(STRING string, INTEGER times)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String replace(STRING string, STRING pattern, STRING replacement)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String reverse(STRING arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String right(STRING string, INTEGER length)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] round(NUMERIC number[, INTEGER places])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Long row_number()
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String rpad(string, length[, padding])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String rtrim(STRING string[, STRING characters])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer second(TIME arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String sha(arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String sha1(arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String sha2(arg0, arg1)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer sign(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double sin(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double sinh(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String soundex(arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String space(INTEGER arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Object sql
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double sqrt(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double stddev(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double stddev_pop(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double stddev_samp(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String str(arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] subdate(DATE datetime, INTEGER days)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String substr(STRING string, INTEGER start[, INTEGER length])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] subtime(TIME datetime, TIME time)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] sum(arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Timestamp sysdate()
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double tan(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double tanh(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String time(arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Timestamp timestamp(arg0[, arg1])
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] basicType@13(java.lang.Long,-5)|basicType@16(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] trunc( ... )
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] truncate( ... )
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] String upper(STRING string)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Date utc_date
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Time utc_time
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Timestamp utc_timestamp
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double var_pop(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double var_samp(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Double variance(NUMERIC arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer week(DATE arg)
2023-06-08 14:51:52 => [HQL_FUNCTIONS] [DEBUG] Integer year(DATE arg)
2023-06-08 14:51:52 => [cache] [DEBUG] Starting QueryPlanCache(2048)
2023-06-08 14:51:52 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.query.spi.NativeQueryInterpreter]
2023-06-08 14:51:52 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.persister.spi.PersisterFactory]
2023-06-08 14:51:52 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.persister.spi.PersisterClassResolver]
2023-06-08 14:51:52 => [ClassLoaderAccessImpl] [DEBUG] Not known whether passed class name [com.zemoso.hibernate.demo.entity.Student] is safe
2023-06-08 14:51:52 => [ClassLoaderAccessImpl] [DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:51:52 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.property.access.spi.PropertyAccessStrategyResolver]
2023-06-08 14:51:52 => [BytecodeProviderImpl] [DEBUG] HHH000513: Unable to create the ReflectionOptimizer for [com.zemoso.hibernate.demo.entity.Student]
org.hibernate.bytecode.internal.bytebuddy.PrivateAccessorException: private accessor [email]
	at org.hibernate.bytecode.internal.bytebuddy.BytecodeProviderImpl.findAccessors(BytecodeProviderImpl.java:1251)
	at org.hibernate.bytecode.internal.bytebuddy.BytecodeProviderImpl.getReflectionOptimizer(BytecodeProviderImpl.java:232)
	at org.hibernate.metamodel.internal.EntityRepresentationStrategyPojoStandard.resolveReflectionOptimizer(EntityRepresentationStrategyPojoStandard.java:293)
	at org.hibernate.metamodel.internal.EntityRepresentationStrategyPojoStandard.<init>(EntityRepresentationStrategyPojoStandard.java:161)
	at org.hibernate.metamodel.internal.ManagedTypeRepresentationResolverStandard.resolveStrategy(ManagedTypeRepresentationResolverStandard.java:62)
	at org.hibernate.persister.entity.AbstractEntityPersister.<init>(AbstractEntityPersister.java:503)
	at org.hibernate.persister.entity.SingleTableEntityPersister.<init>(SingleTableEntityPersister.java:140)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at org.hibernate.persister.internal.PersisterFactoryImpl.createEntityPersister(PersisterFactoryImpl.java:92)
	at org.hibernate.persister.internal.PersisterFactoryImpl.createEntityPersister(PersisterFactoryImpl.java:75)
	at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.processBootEntities(MappingMetamodelImpl.java:247)
	at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.finishInitialization(MappingMetamodelImpl.java:185)
	at org.hibernate.internal.SessionFactoryImpl.initializeMappingModel(SessionFactoryImpl.java:319)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:269)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:431)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:894)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:913)
	at com.zemoso.hibernate.demo.DeleteStudentDemo.main(DeleteStudentDemo.java:15)
2023-06-08 14:51:52 => [AbstractPropertyMapping] [TRACE] Skipping duplicate registration of path [email], existing type = [basicType@5(java.lang.String,12)], incoming type = [basicType@5(java.lang.String,12)]
2023-06-08 14:51:52 => [AbstractPropertyMapping] [TRACE] Skipping duplicate registration of path [firstName], existing type = [basicType@5(java.lang.String,12)], incoming type = [basicType@5(java.lang.String,12)]
2023-06-08 14:51:52 => [AbstractPropertyMapping] [TRACE] Skipping duplicate registration of path [lastName], existing type = [basicType@5(java.lang.String,12)], incoming type = [basicType@5(java.lang.String,12)]
2023-06-08 14:51:52 => [AbstractPropertyMapping] [TRACE] Skipping duplicate registration of path [id], existing type = [basicType@4(java.lang.Integer,4)], incoming type = [basicType@4(java.lang.Integer,4)]
2023-06-08 14:51:52 => [creation] [DEBUG] Starting post-init callbacks
2023-06-08 14:51:52 => [creation] [DEBUG] Starting PostInitCallbackEntry : Entity(com.zemoso.hibernate.demo.entity.Student) `staticFetchableList` generator
2023-06-08 14:51:53 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.sql.ast.spi.ParameterMarkerStrategy]
2023-06-08 14:51:53 => [AbstractEntityPersister] [DEBUG] Static SQL for entity: com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:51:53 => [AbstractEntityPersister] [DEBUG]  Version select: select id from student where id=?
2023-06-08 14:51:53 => [AbstractEntityPersister] [DEBUG]  Insert (0): insert into student (email,first_name,last_name) values (?,?,?)
2023-06-08 14:51:53 => [AbstractEntityPersister] [DEBUG]  Update (0): update student set email=?,first_name=?,last_name=? where id=?
2023-06-08 14:51:53 => [AbstractEntityPersister] [DEBUG]  Delete (0): delete from student where id=?
2023-06-08 14:51:53 => [create] [DEBUG] Created new SQL alias : s1_0
2023-06-08 14:51:53 => [create] [DEBUG] Registration of TableGroup [StandardTableGroup(com.zemoso.hibernate.demo.entity.Student)] with identifierForTableGroup [com.zemoso.hibernate.demo.entity.Student] for NavigablePath [com.zemoso.hibernate.demo.entity.Student] 
2023-06-08 14:51:53 => [LoaderSelectBuilder] [TRACE] Starting visitation of FetchParent's Fetchables : com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:51:53 => [AST] [DEBUG] DomainResult Graph:
 \-EntityResultImpl [com.zemoso.hibernate.demo.entity.Student]
 |  +-BasicFetch [com.zemoso.hibernate.demo.entity.Student.email]
 |  +-BasicFetch [com.zemoso.hibernate.demo.entity.Student.firstName]
 |  \-BasicFetch [com.zemoso.hibernate.demo.entity.Student.lastName]

2023-06-08 14:51:53 => [AST] [TRACE] Stack trace calling DomainResultGraphPrinter
java.lang.Exception
	at org.hibernate.sql.results.graph.DomainResultGraphPrinter.visitDomainResults(DomainResultGraphPrinter.java:73)
	at org.hibernate.sql.results.graph.DomainResultGraphPrinter.logDomainResultGraph(DomainResultGraphPrinter.java:49)
	at org.hibernate.sql.results.graph.DomainResultGraphPrinter.logDomainResultGraph(DomainResultGraphPrinter.java:40)
	at org.hibernate.sql.ast.spi.AbstractSqlAstTranslator.translateSelect(AbstractSqlAstTranslator.java:829)
	at org.hibernate.sql.ast.spi.AbstractSqlAstTranslator.translate(AbstractSqlAstTranslator.java:782)
	at org.hibernate.loader.ast.internal.SingleIdLoadPlan.<init>(SingleIdLoadPlan.java:66)
	at org.hibernate.loader.ast.internal.SingleIdEntityLoaderStandardImpl.createLoadPlan(SingleIdEntityLoaderStandardImpl.java:195)
	at org.hibernate.loader.ast.internal.SingleIdEntityLoaderStandardImpl.prepare(SingleIdEntityLoaderStandardImpl.java:54)
	at org.hibernate.persister.entity.AbstractEntityPersister.prepareLoader(AbstractEntityPersister.java:3391)
	at org.hibernate.persister.entity.AbstractEntityPersister.postInstantiate(AbstractEntityPersister.java:3385)
	at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.finishInitialization(MappingMetamodelImpl.java:204)
	at org.hibernate.internal.SessionFactoryImpl.initializeMappingModel(SessionFactoryImpl.java:319)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:269)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:431)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:894)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:913)
	at com.zemoso.hibernate.demo.DeleteStudentDemo.main(DeleteStudentDemo.java:15)
2023-06-08 14:51:53 => [tree] [DEBUG] SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (s1 : com.zemoso.hibernate.demo.entity.Student) {
          primaryTableReference : student as s1_0
        }
      }
    }

2023-06-08 14:51:53 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.sql.results.jdbc.spi.JdbcValuesMappingProducerProvider]
2023-06-08 14:51:53 => [MetadataContext] [TRACE] Wrapping up metadata context...
2023-06-08 14:51:53 => [MetadataContext] [TRACE] Starting entity [com.zemoso.hibernate.demo.entity.Student]
2023-06-08 14:51:53 => [AttributeFactory] [TRACE] Building identifier attribute [com.zemoso.hibernate.demo.entity.Student.id]
2023-06-08 14:51:53 => [AttributeFactory] [TRACE] Starting attribute metadata determination [id]
2023-06-08 14:51:53 => [AttributeFactory] [TRACE]     Determined member [private int com.zemoso.hibernate.demo.entity.Student.id]
2023-06-08 14:51:53 => [AttributeFactory] [TRACE]     Determined type [name=integer, class=org.hibernate.type.internal.NamedBasicTypeImpl]
2023-06-08 14:51:53 => [AttributeFactory] [TRACE] Building attribute [com.zemoso.hibernate.demo.entity.Student.email]
2023-06-08 14:51:53 => [AttributeFactory] [TRACE] Starting attribute metadata determination [email]
2023-06-08 14:51:53 => [AttributeFactory] [TRACE]     Determined member [private java.lang.String com.zemoso.hibernate.demo.entity.Student.email]
2023-06-08 14:51:53 => [AttributeFactory] [TRACE]     Determined type [name=string, class=org.hibernate.type.internal.NamedBasicTypeImpl]
2023-06-08 14:51:53 => [AttributeFactory] [TRACE] Building attribute [com.zemoso.hibernate.demo.entity.Student.firstName]
2023-06-08 14:51:53 => [AttributeFactory] [TRACE] Starting attribute metadata determination [firstName]
2023-06-08 14:51:53 => [AttributeFactory] [TRACE]     Determined member [private java.lang.String com.zemoso.hibernate.demo.entity.Student.firstName]
2023-06-08 14:51:53 => [AttributeFactory] [TRACE]     Determined type [name=string, class=org.hibernate.type.internal.NamedBasicTypeImpl]
2023-06-08 14:51:53 => [AttributeFactory] [TRACE] Building attribute [com.zemoso.hibernate.demo.entity.Student.lastName]
2023-06-08 14:51:53 => [AttributeFactory] [TRACE] Starting attribute metadata determination [lastName]
2023-06-08 14:51:53 => [AttributeFactory] [TRACE]     Determined member [private java.lang.String com.zemoso.hibernate.demo.entity.Student.lastName]
2023-06-08 14:51:53 => [AttributeFactory] [TRACE]     Determined type [name=string, class=org.hibernate.type.internal.NamedBasicTypeImpl]
2023-06-08 14:51:53 => [AbstractIdentifiableType] [TRACE] Interpreting domain-model identifier descriptor
2023-06-08 14:51:53 => [MetadataContext] [TRACE] Completed entity [com.zemoso.hibernate.demo.entity.Student]
2023-06-08 14:51:53 => [SessionFactoryServiceRegistryImpl] [DEBUG] EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-06-08 14:51:53 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.mutation.spi.MutationExecutorService]
2023-06-08 14:51:53 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.event.spi.EntityCopyObserverFactory]
2023-06-08 14:51:53 => [EntityCopyObserverFactoryInitiator] [DEBUG] Configured EntityCopyObserver strategy: disallow
2023-06-08 14:51:53 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.batch.spi.BatchBuilder]
2023-06-08 14:51:53 => [batch] [TRACE] Using standard BatchBuilder (1)
2023-06-08 14:51:53 => [TypeConfiguration$Scope] [DEBUG] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@517bd097] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@76bf1bb8]
2023-06-08 14:51:53 => [NamedObjectRepository] [DEBUG] Checking 0 named HQL queries
2023-06-08 14:51:53 => [NamedObjectRepository] [DEBUG] Checking 0 named SQL queries
2023-06-08 14:51:53 => [SchemaManagementToolCoordinator] [DEBUG] No schema actions specified for contributor `orm`; doing nothing
2023-06-08 14:51:53 => [SchemaManagementToolCoordinator] [DEBUG] No actions found; doing nothing
2023-06-08 14:51:53 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jndi.spi.JndiService]
2023-06-08 14:51:53 => [SessionFactoryRegistry] [DEBUG] Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@3b42121d
2023-06-08 14:51:53 => [SessionFactoryRegistry] [DEBUG] Registering SessionFactory: bdafe2de-546b-4dcb-acf9-a42d6dddf8a3 (<unnamed>)
2023-06-08 14:51:53 => [SessionFactoryRegistry] [DEBUG] Not binding SessionFactory to JNDI, no JNDI name configured
2023-06-08 14:51:53 => [TypeConfiguration$Scope] [TRACE] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@76bf1bb8] for TypeConfiguration
2023-06-08 14:51:53 => [SessionFactoryImpl] [DEBUG] Instantiated SessionFactory
2023-06-08 14:51:53 => [SessionFactoryImpl$SessionBuilderImpl] [TRACE] Opening Hibernate Session.  tenant=null
2023-06-08 14:51:53 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.stat.spi.StatisticsImplementor]
2023-06-08 14:51:53 => [StatisticsInitiator] [DEBUG] Statistics initialized [enabled=false]
2023-06-08 14:51:53 => [SessionImpl] [TRACE] Opened Session [429d6910-cf48-4ff9-a45c-c0880a6908ac] at timestamp: 1686216113198
2023-06-08 14:51:53 => [TransactionImpl] [DEBUG] On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-06-08 14:51:53 => [ThreadLocalSessionContext] [TRACE] Allowing invocation [beginTransaction] to proceed to real (non-transacted) session
2023-06-08 14:51:53 => [ThreadLocalSessionContext] [TRACE] Allowing proxy invocation [beginTransaction] to proceed to real session
2023-06-08 14:51:53 => [TransactionImpl] [DEBUG] begin
2023-06-08 14:51:53 => [AbstractLogicalConnectionImplementor] [TRACE] Preparing to begin transaction via JDBC Connection.setAutoCommit(false)
2023-06-08 14:51:53 => [AbstractLogicalConnectionImplementor] [TRACE] Transaction begun via JDBC Connection.setAutoCommit(false)
2023-06-08 14:51:53 => [JdbcResourceLocalTransactionCoordinatorImpl] [TRACE] ResourceLocalTransactionCoordinatorImpl#afterBeginCallback
2023-06-08 14:51:53 => [ThreadLocalSessionContext] [TRACE] Allowing proxy invocation [createQuery] to proceed to real session
2023-06-08 14:51:53 => [cache] [TRACE] QueryPlan#resolveHqlInterpretation( `delete from Student where firstName='akash'` )
2023-06-08 14:51:53 => [hql] [DEBUG] HQL : delete from Student where firstName='akash'
2023-06-08 14:51:53 => [creation] [TRACE] SqmProcessingIndex#register(SqmPath) : com.zemoso.hibernate.demo.entity.Student(2042056195446700)
2023-06-08 14:51:53 => [hql] [TRACE] BasicDotIdentifierHandler#consumeIdentifier( firstName, true, true ) - firstName
2023-06-08 14:51:53 => [hql] [TRACE] BaseLocalSequencePart#consumeIdentifier( firstName, true, true ) - firstName
2023-06-08 14:51:53 => [hql] [DEBUG] Unable to resolve unqualified attribute [firstName] in local from-clause
2023-06-08 14:51:53 => [ast] [DEBUG] SqmStatement Tree :
    -> [delete]
      [target = com.zemoso.hibernate.demo.entity.Student(2042056195446700)]
      -> [where]
        -> [EQUAL]
            -> [basic-path] - `com.zemoso.hibernate.demo.entity.Student(2042056195446700).firstName`
        <- [EQUAL]
      <- [where]
    <- [delete]

2023-06-08 14:51:53 => [create] [DEBUG] Created new SQL alias : s1_0
2023-06-08 14:51:53 => [create] [DEBUG] Registration of TableGroup [StandardTableGroup(com.zemoso.hibernate.demo.entity.Student(2042056195446700))] with identifierForTableGroup [com.zemoso.hibernate.demo.entity.Student] for NavigablePath [com.zemoso.hibernate.demo.entity.Student] 
2023-06-08 14:51:53 => [AbstractEntityPersister] [TRACE] #findSubPart(`firstName`)
2023-06-08 14:51:53 => [BaseSqmToSqlAstConverter] [DEBUG] Determining mapping-model type for SqmPath : SqmBasicValuedSimplePath(com.zemoso.hibernate.demo.entity.Student(2042056195446700).firstName) 
2023-06-08 14:51:53 => [AbstractEntityPersister] [TRACE] #findSubPart(`firstName`)
2023-06-08 14:51:53 => [SQL] [DEBUG] delete from student where first_name='akash'
2023-06-08 14:51:53 => [ResourceRegistryStandardImpl] [TRACE] Registering statement [com.mysql.cj.jdbc.ClientPreparedStatement: delete from student where first_name='akash']
2023-06-08 14:51:53 => [ResourceRegistryStandardImpl] [TRACE] Releasing statement [com.mysql.cj.jdbc.ClientPreparedStatement: delete from student where first_name='akash']
2023-06-08 14:51:53 => [ResourceRegistryStandardImpl] [TRACE] Closing prepared statement [com.mysql.cj.jdbc.ClientPreparedStatement: delete from student where first_name='akash']
2023-06-08 14:51:53 => [AbstractLogicalConnectionImplementor] [TRACE] LogicalConnection#afterStatement
2023-06-08 14:51:53 => [ThreadLocalSessionContext] [TRACE] Allowing proxy invocation [getTransaction] to proceed to real session
2023-06-08 14:51:53 => [TransactionImpl] [DEBUG] committing
2023-06-08 14:51:53 => [JdbcResourceLocalTransactionCoordinatorImpl] [TRACE] ResourceLocalTransactionCoordinatorImpl#beforeCompletionCallback
2023-06-08 14:51:53 => [SessionImpl] [TRACE] SessionImpl#beforeTransactionCompletion()
2023-06-08 14:51:53 => [SessionImpl] [TRACE] Automatically flushing session
2023-06-08 14:51:53 => [AbstractLogicalConnectionImplementor] [TRACE] LogicalConnection#beforeTransactionCompletion
2023-06-08 14:51:53 => [SynchronizationRegistryStandardImpl] [TRACE] SynchronizationRegistryStandardImpl.notifySynchronizationsBeforeTransactionCompletion
2023-06-08 14:51:53 => [AbstractLogicalConnectionImplementor] [TRACE] Preparing to commit transaction via JDBC Connection.commit()
2023-06-08 14:51:53 => [AbstractLogicalConnectionImplementor] [TRACE] Transaction committed via JDBC Connection.commit()
2023-06-08 14:51:53 => [AbstractLogicalConnectionImplementor] [TRACE] LogicalConnection#afterTransaction
2023-06-08 14:51:53 => [ResourceRegistryStandardImpl] [TRACE] Releasing JDBC resources
2023-06-08 14:51:53 => [LogicalConnectionManagedImpl] [DEBUG] Initiating JDBC connection release from afterTransaction
2023-06-08 14:51:53 => [ResourceRegistryStandardImpl] [TRACE] Releasing JDBC resources
2023-06-08 14:51:53 => [JdbcResourceLocalTransactionCoordinatorImpl] [TRACE] ResourceLocalTransactionCoordinatorImpl#afterCompletionCallback(true)
2023-06-08 14:51:53 => [SynchronizationRegistryStandardImpl] [TRACE] SynchronizationRegistryStandardImpl.notifySynchronizationsAfterTransactionCompletion(3)
2023-06-08 14:51:53 => [SynchronizationRegistryStandardImpl] [DEBUG] Clearing local Synchronizations
2023-06-08 14:51:53 => [AbstractLogicalConnectionImplementor] [TRACE] LogicalConnection#afterTransaction
2023-06-08 14:51:53 => [ResourceRegistryStandardImpl] [TRACE] Releasing JDBC resources
2023-06-08 14:51:53 => [LogicalConnectionManagedImpl] [DEBUG] Initiating JDBC connection release from afterTransaction
2023-06-08 14:51:53 => [SessionImpl] [TRACE] SessionImpl#afterTransactionCompletion(successful=true, delayed=false)
2023-06-08 14:51:53 => [SessionImpl] [TRACE] Automatically closing session
2023-06-08 14:51:53 => [SessionImpl] [TRACE] Closing session [429d6910-cf48-4ff9-a45c-c0880a6908ac]
2023-06-08 14:51:53 => [JdbcCoordinatorImpl] [TRACE] Closing JDBC container [org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl@684ce74c]
2023-06-08 14:51:53 => [ResourceRegistryStandardImpl] [TRACE] Releasing JDBC resources
2023-06-08 14:51:53 => [LogicalConnectionManagedImpl] [TRACE] Closing logical connection
2023-06-08 14:51:53 => [LogicalConnectionManagedImpl] [TRACE] Logical connection closed
2023-06-08 14:51:53 => [SessionFactoryImpl] [DEBUG] HHH000031: Closing
2023-06-08 14:51:53 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider]
2023-06-08 14:51:53 => [TypeConfiguration$Scope] [TRACE] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@76bf1bb8] for TypeConfiguration
2023-06-08 14:51:53 => [TypeConfiguration$Scope] [DEBUG] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@68e5c7ae] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@76bf1bb8]
2023-06-08 14:51:53 => [AbstractServiceRegistryImpl] [DEBUG] Implicitly destroying ServiceRegistry on de-registration of all child ServiceRegistries
2023-06-08 14:51:53 => [pooling] [INFO] HHH10001008: Cleaning up connection pool [jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC]
2023-06-08 14:51:53 => [BootstrapServiceRegistryImpl] [DEBUG] Implicitly destroying Boot-strap registry on de-registration of all child ServiceRegistries
2023-06-08 14:53:03 => [logging] [DEBUG] Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-06-08 14:53:03 => [IntegratorServiceImpl] [DEBUG] Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-06-08 14:53:03 => [IntegratorServiceImpl] [DEBUG] Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [jdbc] -> [org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [jta] -> [org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorBuilderImpl]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [org.hibernate.transaction.JDBCTransactionFactory] -> [org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [org.hibernate.transaction.JTATransactionFactory] -> [org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorBuilderImpl]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [org.hibernate.transaction.CMTTransactionFactory] -> [org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorBuilderImpl]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.query.sqm.mutation.spi.SqmMultiTableMutationStrategy] : [cte] -> [org.hibernate.query.sqm.mutation.internal.cte.CteMutationStrategy]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.query.sqm.mutation.spi.SqmMultiTableMutationStrategy] : [global_temporary] -> [org.hibernate.query.sqm.mutation.internal.temptable.GlobalTemporaryTableMutationStrategy]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.query.sqm.mutation.spi.SqmMultiTableMutationStrategy] : [local_temporary] -> [org.hibernate.query.sqm.mutation.internal.temptable.LocalTemporaryTableMutationStrategy]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.query.sqm.mutation.spi.SqmMultiTableMutationStrategy] : [persistent] -> [org.hibernate.query.sqm.mutation.internal.temptable.PersistentTableMutationStrategy]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [default] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [jpa] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [legacy-jpa] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [legacy-hbm] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [component-path] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.id.enhanced.ImplicitDatabaseObjectNamingStrategy] : [standard] -> [org.hibernate.id.enhanced.StandardNamingStrategy]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.id.enhanced.ImplicitDatabaseObjectNamingStrategy] : [single] -> [org.hibernate.id.enhanced.SingleNamingStrategy]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.id.enhanced.ImplicitDatabaseObjectNamingStrategy] : [legacy] -> [org.hibernate.id.enhanced.LegacyNamingStrategy]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.relational.ColumnOrderingStrategy] : [default] -> [org.hibernate.boot.model.relational.ColumnOrderingStrategyStandard]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.relational.ColumnOrderingStrategy] : [legacy] -> [org.hibernate.boot.model.relational.ColumnOrderingStrategyLegacy]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.cache.spi.CacheKeysFactory] : [default] -> [org.hibernate.cache.internal.DefaultCacheKeysFactory]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.cache.spi.CacheKeysFactory] : [simple] -> [org.hibernate.cache.internal.SimpleCacheKeysFactory]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.type.format.FormatMapper] : [jackson] -> [org.hibernate.type.format.jackson.JacksonJsonFormatMapper]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.type.format.FormatMapper] : [jsonb] -> [org.hibernate.type.format.jakartajson.JsonBJsonFormatMapper]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.type.format.FormatMapper] : [jackson-xml] -> [org.hibernate.type.format.jackson.JacksonXmlFormatMapper]
2023-06-08 14:53:03 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.type.format.FormatMapper] : [jaxb] -> [org.hibernate.type.format.jaxb.JaxbXmlFormatMapper]
2023-06-08 14:53:03 => [Version] [INFO] HHH000412: Hibernate ORM core version 6.2.3.Final
2023-06-08 14:53:03 => [Environment] [DEBUG] HHH000206: hibernate.properties not found
2023-06-08 14:53:03 => [Environment] [INFO] HHH000406: Using bytecode reflection optimizer
2023-06-08 14:53:03 => [ClassLoaderServiceImpl] [TRACE] trying via [new URL("hibernate.cfg.xml")]
2023-06-08 14:53:03 => [ClassLoaderServiceImpl] [TRACE] trying via [ClassLoader.getResourceAsStream("hibernate.cfg.xml")]
2023-06-08 14:53:03 => [LocalXmlResourceResolver] [TRACE] In resolveEntity(-//Hibernate/Hibernate Configuration DTD 3.0//EN, http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd, null, null)
2023-06-08 14:53:03 => [LocalXmlResourceResolver] [DEBUG] Checking public/system identifiers `-//Hibernate/Hibernate Configuration DTD 3.0//EN`/`http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd` as DTD references
2023-06-08 14:53:03 => [JaxbCfgProcessor] [DEBUG] cfg.xml document did not define namespaces; wrapping in custom event reader to introduce namespace information
2023-06-08 14:53:03 => [Configuration] [DEBUG] Building session factory using internal StandardServiceRegistryBuilder
2023-06-08 14:53:03 => [Configuration] [DEBUG] Building session factory using provided StandardServiceRegistry
2023-06-08 14:53:03 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.id.factory.IdentifierGeneratorFactory]
2023-06-08 14:53:03 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.config.spi.ConfigurationService]
2023-06-08 14:53:03 => [factory] [DEBUG] Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-06-08 14:53:03 => [factory] [DEBUG] Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-06-08 14:53:03 => [factory] [DEBUG] Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-06-08 14:53:03 => [factory] [DEBUG] Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-06-08 14:53:03 => [factory] [DEBUG] Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-06-08 14:53:03 => [factory] [DEBUG] Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-06-08 14:53:03 => [factory] [DEBUG] Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-06-08 14:53:03 => [factory] [DEBUG] Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-06-08 14:53:03 => [factory] [DEBUG] Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-06-08 14:53:03 => [factory] [DEBUG] Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-06-08 14:53:03 => [factory] [DEBUG] Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-06-08 14:53:03 => [factory] [DEBUG] Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-06-08 14:53:03 => [factory] [DEBUG] Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-06-08 14:53:03 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider]
2023-06-08 14:53:03 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.cache.spi.RegionFactory]
2023-06-08 14:53:03 => [RegionFactoryInitiator] [DEBUG] Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-06-08 14:53:03 => [RegionFactoryInitiator] [DEBUG] Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@79dc5318
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@79dc5318
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@79dc5318
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@8e50104
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@8e50104
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@37e4d7bb
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@37e4d7bb
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6f7923a5
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6f7923a5
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration byte -> org.hibernate.type.BasicTypeReference@74a6f9c1
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration byte -> org.hibernate.type.BasicTypeReference@74a6f9c1
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@74a6f9c1
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration binary -> org.hibernate.type.BasicTypeReference@54eb2b70
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@54eb2b70
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration [B -> org.hibernate.type.BasicTypeReference@54eb2b70
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@45a37759
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@45a37759
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration image -> org.hibernate.type.BasicTypeReference@63611043
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration blob -> org.hibernate.type.BasicTypeReference@20ca951f
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@20ca951f
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@2d778add
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@73302995
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration short -> org.hibernate.type.BasicTypeReference@1838ccb8
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration short -> org.hibernate.type.BasicTypeReference@1838ccb8
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@1838ccb8
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration integer -> org.hibernate.type.BasicTypeReference@6c2ed0cd
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration int -> org.hibernate.type.BasicTypeReference@6c2ed0cd
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6c2ed0cd
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration long -> org.hibernate.type.BasicTypeReference@7d9e8ef7
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration long -> org.hibernate.type.BasicTypeReference@7d9e8ef7
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@7d9e8ef7
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration float -> org.hibernate.type.BasicTypeReference@f107c50
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration float -> org.hibernate.type.BasicTypeReference@f107c50
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@f107c50
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration double -> org.hibernate.type.BasicTypeReference@51133c06
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration double -> org.hibernate.type.BasicTypeReference@51133c06
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@51133c06
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@4b213651
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@4b213651
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@4241e0f4
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@4241e0f4
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration character -> org.hibernate.type.BasicTypeReference@4ebff610
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration char -> org.hibernate.type.BasicTypeReference@4ebff610
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4ebff610
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@60410cd
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration string -> org.hibernate.type.BasicTypeReference@44d52de2
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@44d52de2
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@95e33cc
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration characters -> org.hibernate.type.BasicTypeReference@38604b81
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@38604b81
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration [C -> org.hibernate.type.BasicTypeReference@38604b81
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@1e44b638
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration text -> org.hibernate.type.BasicTypeReference@7393222f
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@babafc2
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration clob -> org.hibernate.type.BasicTypeReference@31add175
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@31add175
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@ae3540e
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@ae3540e
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@600b9d27
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@3688eb5b
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@69f1a286
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@7922d892
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@457c9034
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@345f69f3
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@50de186c
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@50de186c
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@3f57bcad
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@3f57bcad
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@1e8b7643
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@1e8b7643
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@51549490
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@51549490
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@71e9ebae
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@71e9ebae
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@73d983ea
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@36a5cabc
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@432038ec
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@432038ec
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@7daa0fbd
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@42530531
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5a3bc7ed
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@181e731e
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@181e731e
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@35645047
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6f44a157
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration date -> org.hibernate.type.BasicTypeReference@6bc407fd
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@6bc407fd
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration time -> org.hibernate.type.BasicTypeReference@291f18
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@291f18
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@17d88132
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@17d88132
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@17d88132
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@5ddcc487
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@5ddcc487
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@5ddcc487
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@16eccb2e
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@5ef5c734
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration instant -> org.hibernate.type.BasicTypeReference@d771cc9
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@d771cc9
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@36b4091c
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@36b4091c
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@36b4091c
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@4671115f
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@36cda2c2
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration class -> org.hibernate.type.BasicTypeReference@3697186
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3697186
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration currency -> org.hibernate.type.BasicTypeReference@1583741e
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@1583741e
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@1583741e
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration locale -> org.hibernate.type.BasicTypeReference@5b367418
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@5b367418
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@36060e
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@36060e
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@481ba2cf
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@481ba2cf
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@46b61c56
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@46b61c56
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration url -> org.hibernate.type.BasicTypeReference@2e48362c
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@2e48362c
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@1efe439d
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration object -> org.hibernate.type.JavaObjectType@63f259c3
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@63f259c3
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration null -> org.hibernate.type.NullType@27216cd
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@8576fa0
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@7582ff54
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@67545b57
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@6c2c1385
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@5f354bcf
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@3daf7722
2023-06-08 14:53:03 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@78641d23
2023-06-08 14:53:03 => [SqmFunctionRegistry] [TRACE] SqmFunctionRegistry created
2023-06-08 14:53:03 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.boot.cfgxml.spi.CfgXmlAccessService]
2023-06-08 14:53:03 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]
2023-06-08 14:53:03 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.dialect.spi.DialectFactory]
2023-06-08 14:53:03 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.dialect.spi.DialectResolver]
2023-06-08 14:53:03 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider]
2023-06-08 14:53:03 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.ConnectionProvider]
2023-06-08 14:53:03 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider]
2023-06-08 14:53:03 => [pooling] [WARN] HHH10001002: Using built-in connection pool (not intended for production use)
2023-06-08 14:53:03 => [pooling] [INFO] HHH10001005: Loaded JDBC driver class: com.mysql.cj.jdbc.Driver
2023-06-08 14:53:03 => [pooling] [INFO] HHH10001012: Connecting with JDBC URL [jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC]
2023-06-08 14:53:03 => [pooling] [INFO] HHH10001001: Connection properties: {password=hbstudent, user=hbstudent}
2023-06-08 14:53:03 => [pooling] [INFO] HHH10001003: Autocommit mode: false
2023-06-08 14:53:03 => [pooling] [DEBUG] Initializing Connection pool with 1 Connections
2023-06-08 14:53:03 => [pooling] [INFO] HHH10001115: Connection pool size: 1 (min=1)
2023-06-08 14:53:04 => [JdbcEnvironmentInitiator] [DEBUG] Database ->
       name : MySQL
    version : 8.0.33
      major : 8
      minor : 0
2023-06-08 14:53:04 => [JdbcEnvironmentInitiator] [DEBUG] Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.28 (Revision: 7ff2161da3899f379fb3171b6538b191b1c5c7e2)
      major : 8
      minor : 0
2023-06-08 14:53:04 => [JdbcEnvironmentInitiator] [DEBUG] JDBC version : 4.2
2023-06-08 14:53:04 => [dialect] [DEBUG] HHH035001: Using dialect: org.hibernate.dialect.MySQLDialect, version: 8.0.33
2023-06-08 14:53:04 => [IdentifierHelperBuilder] [DEBUG] JDBC driver metadata reported database stores quoted identifiers in more than one case
2023-06-08 14:53:04 => [IdentifierHelperBuilder] [DEBUG] IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2023-06-08 14:53:04 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [hb_student_tracker]
2023-06-08 14:53:04 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [null]
2023-06-08 14:53:04 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.spi.JdbcServices]
2023-06-08 14:53:04 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.spi.SqlStatementLogger]
2023-06-08 14:53:04 => [DdlTypeRegistry] [DEBUG] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5f4d427e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6e521c1e)
2023-06-08 14:53:04 => [DdlTypeRegistry] [DEBUG] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@224b4d61) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5d5d9e5)
2023-06-08 14:53:04 => [DdlTypeRegistry] [DEBUG] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@303e3593) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4ef27d66)
2023-06-08 14:53:04 => [DdlTypeRegistry] [DEBUG] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@362a019c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1d9bec4d)
2023-06-08 14:53:04 => [DdlTypeRegistry] [DEBUG] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5c48c0c0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@10c8f62)
2023-06-08 14:53:04 => [DdlTypeRegistry] [DEBUG] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@674c583e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@25f7391e)
2023-06-08 14:53:04 => [DdlTypeRegistry] [DEBUG] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3f23a3a0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5ab14cb9)
2023-06-08 14:53:04 => [DdlTypeRegistry] [DEBUG] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5fb97279) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@439a8f59)
2023-06-08 14:53:04 => [DdlTypeRegistry] [DEBUG] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@61861a29) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@31024624)
2023-06-08 14:53:04 => [JdbcTypeRegistry] [DEBUG] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-06-08 14:53:04 => [JdbcTypeRegistry] [DEBUG] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-06-08 14:53:04 => [JdbcTypeRegistry] [DEBUG] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-06-08 14:53:04 => [JdbcTypeRegistry] [DEBUG] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-06-08 14:53:04 => [JdbcTypeRegistry] [DEBUG] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-06-08 14:53:04 => [BasicTypeRegistry] [DEBUG] Adding type registration null -> org.hibernate.type.NullType@1fc0053e
2023-06-08 14:53:04 => [BasicTypeRegistry] [DEBUG] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@27216cd`
2023-06-08 14:53:04 => [BasicTypeRegistry] [DEBUG] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,3003)
2023-06-08 14:53:04 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,3003)
2023-06-08 14:53:04 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,3003)
2023-06-08 14:53:04 => [BasicTypeRegistry] [DEBUG] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,3003)
2023-06-08 14:53:04 => [BasicTypeRegistry] [DEBUG] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,3003)
2023-06-08 14:53:04 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,3003)
2023-06-08 14:53:04 => [BasicTypeRegistry] [DEBUG] Adding type registration org.hibernate.type.OffsetTimeType -> basicType@3(java.time.OffsetTime,3007)
2023-06-08 14:53:04 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetTime -> basicType@3(java.time.OffsetTime,3007)
2023-06-08 14:53:04 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.OffsetTime -> basicType@3(java.time.OffsetTime,3007)
2023-06-08 14:53:04 => [TypeConfiguration$Scope] [DEBUG] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@517bd097] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@142eef62]
2023-06-08 14:53:04 => [Namespace] [DEBUG] Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-06-08 14:53:04 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.resource.beans.spi.ManagedBeanRegistry]
2023-06-08 14:53:04 => [EntityBinder] [DEBUG] Binding entity from annotated class: com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:53:04 => [EntityBinder] [DEBUG] Import with entity name Student
2023-06-08 14:53:04 => [InFlightMetadataCollectorImpl] [TRACE] Import: Student -> com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:53:04 => [InFlightMetadataCollectorImpl] [TRACE] Import: com.zemoso.hibernate.demo.entity.Student -> com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:53:04 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [student]
2023-06-08 14:53:04 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [student]
2023-06-08 14:53:04 => [EntityBinder] [DEBUG] Bind entity com.zemoso.hibernate.demo.entity.Student on table student
2023-06-08 14:53:04 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [DTYPE]
2023-06-08 14:53:04 => [AnnotatedColumn] [DEBUG] Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-06-08 14:53:04 => [PropertyBinder] [TRACE] Processing annotations of com.zemoso.hibernate.demo.entity.Student.id
2023-06-08 14:53:04 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [id]
2023-06-08 14:53:04 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [id]
2023-06-08 14:53:04 => [AnnotatedColumn] [DEBUG] Binding column: AnnotatedColumn(column='id')
2023-06-08 14:53:04 => [ClassLoaderAccessImpl] [DEBUG] Not known whether passed class name [com.zemoso.hibernate.demo.entity.Student] is safe
2023-06-08 14:53:04 => [ClassLoaderAccessImpl] [DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:53:04 => [PropertyBinder] [DEBUG] MetadataSourceProcessor property id with lazy=false
2023-06-08 14:53:04 => [AbstractPropertyHolder] [DEBUG] Attempting to locate auto-apply AttributeConverter for property [com.zemoso.hibernate.demo.entity.Student:id]
2023-06-08 14:53:04 => [BasicValueBinder] [DEBUG] building BasicValue for id
2023-06-08 14:53:04 => [BasicValue] [DEBUG] Skipping column re-registration: student.id
2023-06-08 14:53:04 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [id]
2023-06-08 14:53:04 => [PropertyBinder] [DEBUG] Building property id
2023-06-08 14:53:04 => [PropertyBinder] [TRACE] Cascading id with null
2023-06-08 14:53:04 => [BinderHelper] [DEBUG] #makeIdGenerator(BasicValue([Column(id)]), id, identity, , ...)
2023-06-08 14:53:04 => [PropertyBinder] [TRACE] Bind @Id on id
2023-06-08 14:53:04 => [PropertyBinder] [TRACE] Processing annotations of com.zemoso.hibernate.demo.entity.Student.email
2023-06-08 14:53:04 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [email]
2023-06-08 14:53:04 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [email]
2023-06-08 14:53:04 => [AnnotatedColumn] [DEBUG] Binding column: AnnotatedColumn(column='email')
2023-06-08 14:53:04 => [PropertyBinder] [DEBUG] MetadataSourceProcessor property email with lazy=false
2023-06-08 14:53:04 => [AbstractPropertyHolder] [DEBUG] Attempting to locate auto-apply AttributeConverter for property [com.zemoso.hibernate.demo.entity.Student:email]
2023-06-08 14:53:04 => [BasicValueBinder] [DEBUG] building BasicValue for email
2023-06-08 14:53:04 => [BasicValue] [DEBUG] Skipping column re-registration: student.email
2023-06-08 14:53:04 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [email]
2023-06-08 14:53:04 => [PropertyBinder] [DEBUG] Building property email
2023-06-08 14:53:04 => [PropertyBinder] [TRACE] Cascading email with null
2023-06-08 14:53:04 => [PropertyBinder] [TRACE] Processing annotations of com.zemoso.hibernate.demo.entity.Student.firstName
2023-06-08 14:53:04 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [first_name]
2023-06-08 14:53:04 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [first_name]
2023-06-08 14:53:04 => [AnnotatedColumn] [DEBUG] Binding column: AnnotatedColumn(column='first_name')
2023-06-08 14:53:04 => [PropertyBinder] [DEBUG] MetadataSourceProcessor property firstName with lazy=false
2023-06-08 14:53:04 => [AbstractPropertyHolder] [DEBUG] Attempting to locate auto-apply AttributeConverter for property [com.zemoso.hibernate.demo.entity.Student:firstName]
2023-06-08 14:53:04 => [BasicValueBinder] [DEBUG] building BasicValue for firstName
2023-06-08 14:53:04 => [BasicValue] [DEBUG] Skipping column re-registration: student.first_name
2023-06-08 14:53:04 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [first_name]
2023-06-08 14:53:04 => [PropertyBinder] [DEBUG] Building property firstName
2023-06-08 14:53:04 => [PropertyBinder] [TRACE] Cascading firstName with null
2023-06-08 14:53:04 => [PropertyBinder] [TRACE] Processing annotations of com.zemoso.hibernate.demo.entity.Student.lastName
2023-06-08 14:53:04 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [last_name]
2023-06-08 14:53:04 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [last_name]
2023-06-08 14:53:04 => [AnnotatedColumn] [DEBUG] Binding column: AnnotatedColumn(column='last_name')
2023-06-08 14:53:04 => [PropertyBinder] [DEBUG] MetadataSourceProcessor property lastName with lazy=false
2023-06-08 14:53:04 => [AbstractPropertyHolder] [DEBUG] Attempting to locate auto-apply AttributeConverter for property [com.zemoso.hibernate.demo.entity.Student:lastName]
2023-06-08 14:53:04 => [BasicValueBinder] [DEBUG] building BasicValue for lastName
2023-06-08 14:53:04 => [BasicValue] [DEBUG] Skipping column re-registration: student.last_name
2023-06-08 14:53:04 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [last_name]
2023-06-08 14:53:04 => [PropertyBinder] [DEBUG] Building property lastName
2023-06-08 14:53:04 => [PropertyBinder] [TRACE] Cascading lastName with null
2023-06-08 14:53:04 => [BasicValueBinder] [DEBUG] Starting `BasicValueBinder#fillSimpleValue` for id
2023-06-08 14:53:04 => [BasicValueBinder] [DEBUG] Starting `BasicValueBinder#fillSimpleValue` for email
2023-06-08 14:53:04 => [BasicValueBinder] [DEBUG] Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-06-08 14:53:04 => [BasicValueBinder] [DEBUG] Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-06-08 14:53:04 => [PrimaryKey] [DEBUG] Forcing column [id] to be non-null as it is part of the primary key for table [student]
2023-06-08 14:53:04 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.boot.spi.SessionFactoryBuilderService]
2023-06-08 14:53:04 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider]
2023-06-08 14:53:04 => [BatchFetchStyle] [TRACE] Interpreting BatchFetchStyle from setting : null
2023-06-08 14:53:04 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder]
2023-06-08 14:53:04 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.bytecode.spi.BytecodeProvider]
2023-06-08 14:53:04 => [BytecodeProviderInitiator] [INFO] HHH000021: Bytecode provider name : bytebuddy
2023-06-08 14:53:04 => [SessionFactoryImpl] [DEBUG] Building session factory
2023-06-08 14:53:04 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.service.spi.SessionFactoryServiceRegistryFactory]
2023-06-08 14:53:04 => [SessionFactoryServiceRegistryImpl] [DEBUG] EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-06-08 14:53:04 => [SessionFactoryImpl] [DEBUG] Instantiating SessionFactory with settings: {dialect=org.hibernate.dialect.MySQLDialect, java.specification.version=17, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQLDialect, java.class.path=C:\Users\Raushan Kumar Gupta\Desktop\zemoso\zemoso-work\raushankrgupta_ldp\spring-hibernate-poc\spring-hibernate\spring-hibernate-demo\target\classes;C:\Users\Raushan Kumar Gupta\.m2\repository\org\springframework\spring-context\6.0.9\spring-context-6.0.9.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\springframework\spring-aop\6.0.9\spring-aop-6.0.9.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\springframework\spring-beans\6.0.9\spring-beans-6.0.9.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\springframework\spring-core\6.0.9\spring-core-6.0.9.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\springframework\spring-jcl\6.0.9\spring-jcl-6.0.9.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\springframework\spring-expression\6.0.9\spring-expression-6.0.9.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\javax\annotation\javax.annotation-api\1.3.2\javax.annotation-api-1.3.2.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\hibernate\orm\hibernate-core\6.2.3.Final\hibernate-core-6.2.3.Final.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\jboss\logging\jboss-logging\3.5.0.Final\jboss-logging-3.5.0.Final.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\hibernate\common\hibernate-commons-annotations\6.0.6.Final\hibernate-commons-annotations-6.0.6.Final.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\io\smallrye\jandex\3.0.5\jandex-3.0.5.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\net\bytebuddy\byte-buddy\1.12.18\byte-buddy-1.12.18.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.0\jakarta.xml.bind-api-4.0.0.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.0\jakarta.activation-api-2.1.0.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.2\jaxb-runtime-4.0.2.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.2\jaxb-core-4.0.2.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\eclipse\angus\angus-activation\2.0.0\angus-activation-2.0.0.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\glassfish\jaxb\txw2\4.0.2\txw2-4.0.2.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.1\istack-commons-runtime-4.1.1.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\antlr\antlr4-runtime\4.10.1\antlr4-runtime-4.10.1.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\mysql\mysql-connector-java\8.0.28\mysql-connector-java-8.0.28.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\com\google\protobuf\protobuf-java\3.11.4\protobuf-java-3.11.4.jar, java.vm.vendor=Amazon.com Inc., sun.arch.data.model=64, user.variant=, java.vendor.url=https://aws.amazon.com/corretto/, user.timezone=Asia/Calcutta, java.vm.specification.version=17, os.name=Windows 11, current_session_context_class=thread, sun.java.launcher=SUN_STANDARD, user.country=IN, sun.boot.library.path=C:\Users\Raushan Kumar Gupta\.jdks\corretto-17.0.7\bin, sun.java.command=com.zemoso.hibernate.demo.DeleteStudentDemo, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\Raushan Kumar Gupta, user.language=en, java.specification.vendor=Oracle Corporation, java.version.date=2023-04-18, java.home=C:\Users\Raushan Kumar Gupta\.jdks\corretto-17.0.7, file.separator=\, java.vm.compressedOopsMode=32-bit, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, user.script=, connection.password=hbstudent, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=17.0.7+7-LTS, user.name=Raushan Kumar Gupta, path.separator=;, hibernate.connection.username=****, os.version=10.0, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC, connection.pool_size=1, file.encoding=UTF-8, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=true, java.vendor.version=Corretto-17.0.7.7.1, hibernate.current_session_context_class=thread, show_sql=true, hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver, java.vendor.url.bug=https://github.com/corretto/corretto-17/issues/, java.io.tmpdir=C:\Users\RAUSHA~1\AppData\Local\Temp\, java.version=17.0.7, user.dir=C:\Users\Raushan Kumar Gupta\Desktop\zemoso\zemoso-work\raushankrgupta_ldp\spring-hibernate-poc\spring-hibernate\spring-hibernate-demo, os.arch=amd64, connection.username=hbstudent, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, sun.os.patch.level=, connection.driver_class=com.mysql.cj.jdbc.Driver, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@35fb22a9, native.encoding=Cp1252, java.library.path=C:\Users\Raushan Kumar Gupta\.jdks\corretto-17.0.7\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Microsoft\jdk-11.0.16.101-hotspot\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Users\Raushan Kumar Gupta\AppData\Local\Android\Sdk\platform-tools;C:\Program Files\nodejs\;C:\maven\bin;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\Raushan Kumar Gupta\AppData\Local\Programs\Python\Python311\Scripts\;C:\Users\Raushan Kumar Gupta\AppData\Local\Programs\Python\Python311\;C:\Users\Raushan Kumar Gupta\AppData\Local\Microsoft\WindowsApps;C:\MinGW\bin;C:\Users\Raushan Kumar Gupta\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\Raushan Kumar Gupta\AppData\Roaming\npm;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.1\bin;;., java.vendor=Amazon.com Inc., java.vm.info=mixed mode, sharing, java.vm.version=17.0.7+7-LTS, hibernate.bytecode.use_reflection_optimizer=true, sun.io.unicode.encoding=UnicodeLittle, hibernate.connection.pool_size=1, connection.url=jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC, java.class.version=61.0}
2023-06-08 14:53:04 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [null]
2023-06-08 14:53:04 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.cache.spi.CacheImplementor]
2023-06-08 14:53:04 => [SessionFactoryImpl] [DEBUG] Session factory constructed with filter configurations : {}
2023-06-08 14:53:04 => [SchemaManagementToolCoordinator] [DEBUG] No schema actions specified for contributor `orm`; doing nothing
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@aaee2a2] under count; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@27ace0b1] under every; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@664e5dee] under any; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@43f61afb] under sinh; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@713064e8] under cosh; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4fad6218] under tanh; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1bf39d06] under pi; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@68217d41] under log; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : length -> character_length
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@55e3d6c3] under position; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@3cff0139] under overlay; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@f096f37] under trim; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@39e43310] under cast; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@eb507b9] under collate; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@3ec2ecea] under extract; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@53a5e217] under ifnull; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@4f453e63] under pad; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@49c8f6e8] under str; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@2416498e] under format; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@2015b2cd] under timestampadd; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@6e1b9411] under timestampdiff; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : dateadd -> timestampadd
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : datediff -> timestampdiff
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@112d1c8e] under current_date; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3d49fd31] under current_time; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@4016ccc1] under current_timestamp; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : current date -> current_date
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : current time -> current_time
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : current timestamp -> current_timestamp
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@46cb98a3] under local_date; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3ffb3598] under local_time; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@4da9f723] under local_datetime; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3b2f4a93] under offset_datetime; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : local date -> local_date
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : local time -> local_time
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : local datetime -> local_datetime
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : offset datetime -> offset_datetime
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@213bd3d5] under instant; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : current_instant -> instant
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@7b78ed6a] under sql; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log)] under log; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@68217d41
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log2)] under log2; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(reverse)] under reverse; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.MultipatternSqmFunctionDescriptor@47447ccf] under lpad; prior registration was NamedSqmFunctionTemplate(lpad)
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.MultipatternSqmFunctionDescriptor@7afb1741] under rpad; prior registration was NamedSqmFunctionTemplate(rpad)
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(md5)] under md5; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayofweek)] under dayofweek; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayofmonth)] under dayofmonth; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : day -> dayofmonth
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayofyear)] under dayofyear; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_day)] under last_day; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(date)] under date; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(timestamp)] under timestamp; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(time)] under time; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(utc_date)] under utc_date; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(utc_time)] under utc_time; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(utc_timestamp)] under utc_timestamp; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(crc32)] under crc32; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sha1)] under sha1; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sha2)] under sha2; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sha)] under sha; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@263bbfeb] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@55e3d6c3
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@37ed010a] under trunc; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : truncate -> trunc
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@633a2e99] under bitand; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@367d2816] under bitor; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@5b84f14] under bitxor; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@5a82ebf8] under bitnot; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev)] under stddev; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(variance)] under variance; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(datediff)] under datediff; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(adddate)] under adddate; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(subdate)] under subdate; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(addtime)] under addtime; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(subtime)] under subtime; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@68fe48d7] under format; prior registration was org.hibernate.dialect.function.FormatFunction@2416498e
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(makedate)] under makedate; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(maketime)] under maketime; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@3ffb3598
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@4da9f723
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was NamedSqmFunctionTemplate(localtime)
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@379ce046] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1bf39d06
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@701bc94e] under chr; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : char -> chr
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@3d8b319e] under sysdate; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetWindowEmulation@28e19366] under rank; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetWindowEmulation@5b275174] under dense_rank; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetWindowEmulation@10ef5fa0] under percent_rank; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetWindowEmulation@244e619a] under cume_dist; prior registration was null
2023-06-08 14:53:04 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggGroupConcatEmulation@5cb042da] under listagg; prior registration was null
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] abs(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double acos(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] adddate(DATE datetime, INTEGER days)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] addtime(TIME datetime, TIME time)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Boolean any(BOOLEAN arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer ascii(STRING arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double asin(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double atan(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double avg(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] bit_and(arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer bit_length(STRING_OR_CLOB arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] bit_or(arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] bitand(arg0, arg1)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] bitnot(arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] bitor(arg0, arg1)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] bitxor(arg0, arg1)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] cast(arg as Type)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] ceiling(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Character char(INTEGER arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer character_length(STRING_OR_CLOB arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Character chr(INTEGER arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] coalesce(arg0[, arg1[, ...]])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String collate(STRING string as COLLATION collation)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String concat(STRING string0[, STRING string1[, ...]])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double cos(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double cosh(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double cot(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Long count([distinct ]{arg|*})
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer crc32(arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double cume_dist([arg0[, ...]])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Date curdate()
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Date current date
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Time current time
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Timestamp current timestamp
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Date current_date
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Instant current_instant
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Time current_time
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Timestamp current_timestamp
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Time curtime()
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Date date(arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer datediff(DATE end, DATE start)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer day(DATE arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String dayname(DATE arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer dayofmonth(DATE arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer dayofweek(DATE arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer dayofyear(DATE arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double degrees(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Long dense_rank([arg0[, ...]])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Boolean every(BOOLEAN arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double exp(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] first_valueANY value
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] floor(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String format(TEMPORAL datetime as STRING pattern)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer hour(TIME arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] ifnull(arg0, arg1)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Instant instant
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] lagANY value[, INTEGER offset[, ANY default]]
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Date last_day(DATE arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] last_valueANY value
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] leadANY value[, INTEGER offset[, ANY default]]
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String left(STRING string, INTEGER length)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer length(STRING_OR_CLOB arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String listagg(STRING arg0, STRING arg1)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double ln(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] LocalDate local date
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] LocalDateTime local datetime
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] LocalTime local time
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] LocalDate local_date
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] LocalDateTime local_datetime
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] LocalTime local_time
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Timestamp localtime
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Timestamp localtimestamp
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double log(NUMERIC arg0[, NUMERIC arg1])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double log10(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double log2(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String lower(STRING string)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String lpad(string, length[, padding])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String ltrim(STRING string[, STRING characters])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Date makedate(INTEGER year, INTEGER dayofyear)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Time maketime(INTEGER hour, INTEGER min, INTEGER sec)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] max(COMPARABLE arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String md5(arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer microsecond(TIME arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] min(COMPARABLE arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer minute(TIME arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer mod(INTEGER arg0, INTEGER arg1)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer month(DATE arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String monthname(DATE arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Timestamp now()
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] nth_valueANY value, INTEGER nth
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] nullif(arg0, arg1)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer octet_length(STRING_OR_CLOB arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] OffsetDateTime offset datetime
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] OffsetDateTime offset_datetime
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double percent_rank([arg0[, ...]])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double pi
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer position(STRING pattern in STRING string)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double power(NUMERIC arg0, NUMERIC arg1)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer quarter(DATE arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double radians(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double rand([INTEGER seed])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Long rank([arg0[, ...]])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String repeat(STRING string, INTEGER times)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String replace(STRING string, STRING pattern, STRING replacement)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String reverse(STRING arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String right(STRING string, INTEGER length)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] round(NUMERIC number[, INTEGER places])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Long row_number()
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String rpad(string, length[, padding])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String rtrim(STRING string[, STRING characters])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer second(TIME arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String sha(arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String sha1(arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String sha2(arg0, arg1)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer sign(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double sin(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double sinh(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String soundex(arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String space(INTEGER arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Object sql
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double sqrt(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double stddev(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double stddev_pop(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double stddev_samp(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String str(arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] subdate(DATE datetime, INTEGER days)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String substr(STRING string, INTEGER start[, INTEGER length])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] subtime(TIME datetime, TIME time)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] sum(arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Timestamp sysdate()
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double tan(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double tanh(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String time(arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Timestamp timestamp(arg0[, arg1])
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] basicType@13(java.lang.Long,-5)|basicType@16(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] trunc( ... )
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] truncate( ... )
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] String upper(STRING string)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Date utc_date
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Time utc_time
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Timestamp utc_timestamp
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double var_pop(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double var_samp(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Double variance(NUMERIC arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer week(DATE arg)
2023-06-08 14:53:04 => [HQL_FUNCTIONS] [DEBUG] Integer year(DATE arg)
2023-06-08 14:53:04 => [cache] [DEBUG] Starting QueryPlanCache(2048)
2023-06-08 14:53:04 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.query.spi.NativeQueryInterpreter]
2023-06-08 14:53:04 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.persister.spi.PersisterFactory]
2023-06-08 14:53:04 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.persister.spi.PersisterClassResolver]
2023-06-08 14:53:04 => [ClassLoaderAccessImpl] [DEBUG] Not known whether passed class name [com.zemoso.hibernate.demo.entity.Student] is safe
2023-06-08 14:53:04 => [ClassLoaderAccessImpl] [DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:53:04 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.property.access.spi.PropertyAccessStrategyResolver]
2023-06-08 14:53:05 => [BytecodeProviderImpl] [DEBUG] HHH000513: Unable to create the ReflectionOptimizer for [com.zemoso.hibernate.demo.entity.Student]
org.hibernate.bytecode.internal.bytebuddy.PrivateAccessorException: private accessor [email]
	at org.hibernate.bytecode.internal.bytebuddy.BytecodeProviderImpl.findAccessors(BytecodeProviderImpl.java:1251)
	at org.hibernate.bytecode.internal.bytebuddy.BytecodeProviderImpl.getReflectionOptimizer(BytecodeProviderImpl.java:232)
	at org.hibernate.metamodel.internal.EntityRepresentationStrategyPojoStandard.resolveReflectionOptimizer(EntityRepresentationStrategyPojoStandard.java:293)
	at org.hibernate.metamodel.internal.EntityRepresentationStrategyPojoStandard.<init>(EntityRepresentationStrategyPojoStandard.java:161)
	at org.hibernate.metamodel.internal.ManagedTypeRepresentationResolverStandard.resolveStrategy(ManagedTypeRepresentationResolverStandard.java:62)
	at org.hibernate.persister.entity.AbstractEntityPersister.<init>(AbstractEntityPersister.java:503)
	at org.hibernate.persister.entity.SingleTableEntityPersister.<init>(SingleTableEntityPersister.java:140)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at org.hibernate.persister.internal.PersisterFactoryImpl.createEntityPersister(PersisterFactoryImpl.java:92)
	at org.hibernate.persister.internal.PersisterFactoryImpl.createEntityPersister(PersisterFactoryImpl.java:75)
	at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.processBootEntities(MappingMetamodelImpl.java:247)
	at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.finishInitialization(MappingMetamodelImpl.java:185)
	at org.hibernate.internal.SessionFactoryImpl.initializeMappingModel(SessionFactoryImpl.java:319)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:269)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:431)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:894)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:913)
	at com.zemoso.hibernate.demo.DeleteStudentDemo.main(DeleteStudentDemo.java:17)
2023-06-08 14:53:05 => [AbstractPropertyMapping] [TRACE] Skipping duplicate registration of path [email], existing type = [basicType@5(java.lang.String,12)], incoming type = [basicType@5(java.lang.String,12)]
2023-06-08 14:53:05 => [AbstractPropertyMapping] [TRACE] Skipping duplicate registration of path [firstName], existing type = [basicType@5(java.lang.String,12)], incoming type = [basicType@5(java.lang.String,12)]
2023-06-08 14:53:05 => [AbstractPropertyMapping] [TRACE] Skipping duplicate registration of path [lastName], existing type = [basicType@5(java.lang.String,12)], incoming type = [basicType@5(java.lang.String,12)]
2023-06-08 14:53:05 => [AbstractPropertyMapping] [TRACE] Skipping duplicate registration of path [id], existing type = [basicType@4(java.lang.Integer,4)], incoming type = [basicType@4(java.lang.Integer,4)]
2023-06-08 14:53:05 => [creation] [DEBUG] Starting post-init callbacks
2023-06-08 14:53:05 => [creation] [DEBUG] Starting PostInitCallbackEntry : Entity(com.zemoso.hibernate.demo.entity.Student) `staticFetchableList` generator
2023-06-08 14:53:05 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.sql.ast.spi.ParameterMarkerStrategy]
2023-06-08 14:53:05 => [AbstractEntityPersister] [DEBUG] Static SQL for entity: com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:53:05 => [AbstractEntityPersister] [DEBUG]  Version select: select id from student where id=?
2023-06-08 14:53:05 => [AbstractEntityPersister] [DEBUG]  Insert (0): insert into student (email,first_name,last_name) values (?,?,?)
2023-06-08 14:53:05 => [AbstractEntityPersister] [DEBUG]  Update (0): update student set email=?,first_name=?,last_name=? where id=?
2023-06-08 14:53:05 => [AbstractEntityPersister] [DEBUG]  Delete (0): delete from student where id=?
2023-06-08 14:53:05 => [create] [DEBUG] Created new SQL alias : s1_0
2023-06-08 14:53:05 => [create] [DEBUG] Registration of TableGroup [StandardTableGroup(com.zemoso.hibernate.demo.entity.Student)] with identifierForTableGroup [com.zemoso.hibernate.demo.entity.Student] for NavigablePath [com.zemoso.hibernate.demo.entity.Student] 
2023-06-08 14:53:05 => [LoaderSelectBuilder] [TRACE] Starting visitation of FetchParent's Fetchables : com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:53:05 => [AST] [DEBUG] DomainResult Graph:
 \-EntityResultImpl [com.zemoso.hibernate.demo.entity.Student]
 |  +-BasicFetch [com.zemoso.hibernate.demo.entity.Student.email]
 |  +-BasicFetch [com.zemoso.hibernate.demo.entity.Student.firstName]
 |  \-BasicFetch [com.zemoso.hibernate.demo.entity.Student.lastName]

2023-06-08 14:53:05 => [AST] [TRACE] Stack trace calling DomainResultGraphPrinter
java.lang.Exception
	at org.hibernate.sql.results.graph.DomainResultGraphPrinter.visitDomainResults(DomainResultGraphPrinter.java:73)
	at org.hibernate.sql.results.graph.DomainResultGraphPrinter.logDomainResultGraph(DomainResultGraphPrinter.java:49)
	at org.hibernate.sql.results.graph.DomainResultGraphPrinter.logDomainResultGraph(DomainResultGraphPrinter.java:40)
	at org.hibernate.sql.ast.spi.AbstractSqlAstTranslator.translateSelect(AbstractSqlAstTranslator.java:829)
	at org.hibernate.sql.ast.spi.AbstractSqlAstTranslator.translate(AbstractSqlAstTranslator.java:782)
	at org.hibernate.loader.ast.internal.SingleIdLoadPlan.<init>(SingleIdLoadPlan.java:66)
	at org.hibernate.loader.ast.internal.SingleIdEntityLoaderStandardImpl.createLoadPlan(SingleIdEntityLoaderStandardImpl.java:195)
	at org.hibernate.loader.ast.internal.SingleIdEntityLoaderStandardImpl.prepare(SingleIdEntityLoaderStandardImpl.java:54)
	at org.hibernate.persister.entity.AbstractEntityPersister.prepareLoader(AbstractEntityPersister.java:3391)
	at org.hibernate.persister.entity.AbstractEntityPersister.postInstantiate(AbstractEntityPersister.java:3385)
	at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.finishInitialization(MappingMetamodelImpl.java:204)
	at org.hibernate.internal.SessionFactoryImpl.initializeMappingModel(SessionFactoryImpl.java:319)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:269)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:431)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:894)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:913)
	at com.zemoso.hibernate.demo.DeleteStudentDemo.main(DeleteStudentDemo.java:17)
2023-06-08 14:53:05 => [tree] [DEBUG] SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (s1 : com.zemoso.hibernate.demo.entity.Student) {
          primaryTableReference : student as s1_0
        }
      }
    }

2023-06-08 14:53:05 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.sql.results.jdbc.spi.JdbcValuesMappingProducerProvider]
2023-06-08 14:53:05 => [MetadataContext] [TRACE] Wrapping up metadata context...
2023-06-08 14:53:05 => [MetadataContext] [TRACE] Starting entity [com.zemoso.hibernate.demo.entity.Student]
2023-06-08 14:53:05 => [AttributeFactory] [TRACE] Building identifier attribute [com.zemoso.hibernate.demo.entity.Student.id]
2023-06-08 14:53:05 => [AttributeFactory] [TRACE] Starting attribute metadata determination [id]
2023-06-08 14:53:05 => [AttributeFactory] [TRACE]     Determined member [private int com.zemoso.hibernate.demo.entity.Student.id]
2023-06-08 14:53:05 => [AttributeFactory] [TRACE]     Determined type [name=integer, class=org.hibernate.type.internal.NamedBasicTypeImpl]
2023-06-08 14:53:05 => [AttributeFactory] [TRACE] Building attribute [com.zemoso.hibernate.demo.entity.Student.email]
2023-06-08 14:53:05 => [AttributeFactory] [TRACE] Starting attribute metadata determination [email]
2023-06-08 14:53:05 => [AttributeFactory] [TRACE]     Determined member [private java.lang.String com.zemoso.hibernate.demo.entity.Student.email]
2023-06-08 14:53:05 => [AttributeFactory] [TRACE]     Determined type [name=string, class=org.hibernate.type.internal.NamedBasicTypeImpl]
2023-06-08 14:53:05 => [AttributeFactory] [TRACE] Building attribute [com.zemoso.hibernate.demo.entity.Student.firstName]
2023-06-08 14:53:05 => [AttributeFactory] [TRACE] Starting attribute metadata determination [firstName]
2023-06-08 14:53:05 => [AttributeFactory] [TRACE]     Determined member [private java.lang.String com.zemoso.hibernate.demo.entity.Student.firstName]
2023-06-08 14:53:05 => [AttributeFactory] [TRACE]     Determined type [name=string, class=org.hibernate.type.internal.NamedBasicTypeImpl]
2023-06-08 14:53:05 => [AttributeFactory] [TRACE] Building attribute [com.zemoso.hibernate.demo.entity.Student.lastName]
2023-06-08 14:53:05 => [AttributeFactory] [TRACE] Starting attribute metadata determination [lastName]
2023-06-08 14:53:05 => [AttributeFactory] [TRACE]     Determined member [private java.lang.String com.zemoso.hibernate.demo.entity.Student.lastName]
2023-06-08 14:53:05 => [AttributeFactory] [TRACE]     Determined type [name=string, class=org.hibernate.type.internal.NamedBasicTypeImpl]
2023-06-08 14:53:05 => [AbstractIdentifiableType] [TRACE] Interpreting domain-model identifier descriptor
2023-06-08 14:53:05 => [MetadataContext] [TRACE] Completed entity [com.zemoso.hibernate.demo.entity.Student]
2023-06-08 14:53:05 => [SessionFactoryServiceRegistryImpl] [DEBUG] EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-06-08 14:53:05 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.mutation.spi.MutationExecutorService]
2023-06-08 14:53:05 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.event.spi.EntityCopyObserverFactory]
2023-06-08 14:53:05 => [EntityCopyObserverFactoryInitiator] [DEBUG] Configured EntityCopyObserver strategy: disallow
2023-06-08 14:53:05 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.batch.spi.BatchBuilder]
2023-06-08 14:53:05 => [batch] [TRACE] Using standard BatchBuilder (1)
2023-06-08 14:53:05 => [TypeConfiguration$Scope] [DEBUG] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@517bd097] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@76bf1bb8]
2023-06-08 14:53:05 => [NamedObjectRepository] [DEBUG] Checking 0 named HQL queries
2023-06-08 14:53:05 => [NamedObjectRepository] [DEBUG] Checking 0 named SQL queries
2023-06-08 14:53:05 => [SchemaManagementToolCoordinator] [DEBUG] No schema actions specified for contributor `orm`; doing nothing
2023-06-08 14:53:05 => [SchemaManagementToolCoordinator] [DEBUG] No actions found; doing nothing
2023-06-08 14:53:05 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jndi.spi.JndiService]
2023-06-08 14:53:05 => [SessionFactoryRegistry] [DEBUG] Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@3b42121d
2023-06-08 14:53:05 => [SessionFactoryRegistry] [DEBUG] Registering SessionFactory: 1e60245c-0b8f-4d50-a124-26db988b7996 (<unnamed>)
2023-06-08 14:53:05 => [SessionFactoryRegistry] [DEBUG] Not binding SessionFactory to JNDI, no JNDI name configured
2023-06-08 14:53:05 => [TypeConfiguration$Scope] [TRACE] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@76bf1bb8] for TypeConfiguration
2023-06-08 14:53:05 => [SessionFactoryImpl] [DEBUG] Instantiated SessionFactory
2023-06-08 14:53:05 => [SessionFactoryImpl$SessionBuilderImpl] [TRACE] Opening Hibernate Session.  tenant=null
2023-06-08 14:53:05 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.stat.spi.StatisticsImplementor]
2023-06-08 14:53:05 => [StatisticsInitiator] [DEBUG] Statistics initialized [enabled=false]
2023-06-08 14:53:05 => [SessionImpl] [TRACE] Opened Session [208afef4-ad3b-4de2-8eb1-b9b9455b56fd] at timestamp: 1686216185319
2023-06-08 14:53:05 => [TransactionImpl] [DEBUG] On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-06-08 14:53:05 => [ThreadLocalSessionContext] [TRACE] Allowing invocation [beginTransaction] to proceed to real (non-transacted) session
2023-06-08 14:53:05 => [ThreadLocalSessionContext] [TRACE] Allowing proxy invocation [beginTransaction] to proceed to real session
2023-06-08 14:53:05 => [TransactionImpl] [DEBUG] begin
2023-06-08 14:53:05 => [AbstractLogicalConnectionImplementor] [TRACE] Preparing to begin transaction via JDBC Connection.setAutoCommit(false)
2023-06-08 14:53:05 => [AbstractLogicalConnectionImplementor] [TRACE] Transaction begun via JDBC Connection.setAutoCommit(false)
2023-06-08 14:53:05 => [JdbcResourceLocalTransactionCoordinatorImpl] [TRACE] ResourceLocalTransactionCoordinatorImpl#afterBeginCallback
2023-06-08 14:53:05 => [ThreadLocalSessionContext] [TRACE] Allowing proxy invocation [get] to proceed to real session
2023-06-08 14:53:05 => [DefaultLoadEventListener] [TRACE] Loading entity: [com.zemoso.hibernate.demo.entity.Student#1]
2023-06-08 14:53:05 => [DefaultLoadEventListener] [TRACE] Attempting to resolve: [com.zemoso.hibernate.demo.entity.Student#1]
2023-06-08 14:53:05 => [DefaultLoadEventListener] [TRACE] Object not resolved in any cache: [com.zemoso.hibernate.demo.entity.Student#1]
2023-06-08 14:53:05 => [AbstractEntityPersister] [TRACE] Fetching entity: [com.zemoso.hibernate.demo.entity.Student#1]
2023-06-08 14:53:05 => [exec] [DEBUG] Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-06-08 14:53:05 => [results] [TRACE] Registering initializer : EntityResultInitializer(com.zemoso.hibernate.demo.entity.Student)
2023-06-08 14:53:05 => [results] [DEBUG] Initializer list
2023-06-08 14:53:05 => [results] [DEBUG]     com.zemoso.hibernate.demo.entity.Student -> EntityResultInitializer(com.zemoso.hibernate.demo.entity.Student)@1215456927 (SingleTableEntityPersister(com.zemoso.hibernate.demo.entity.Student))
2023-06-08 14:53:05 => [DeferredResultSetAccess] [TRACE] Executing query to retrieve ResultSet : select s1_0.id,s1_0.email,s1_0.first_name,s1_0.last_name from student s1_0 where s1_0.id=?
2023-06-08 14:53:05 => [SQL] [DEBUG] select s1_0.id,s1_0.email,s1_0.first_name,s1_0.last_name from student s1_0 where s1_0.id=?
2023-06-08 14:53:05 => [ResourceRegistryStandardImpl] [TRACE] Registering statement [com.mysql.cj.jdbc.ClientPreparedStatement: select s1_0.id,s1_0.email,s1_0.first_name,s1_0.last_name from student s1_0 where s1_0.id=** NOT SPECIFIED **]
2023-06-08 14:53:05 => [bind] [TRACE] binding parameter [1] as [INTEGER] - [1]
2023-06-08 14:53:05 => [ResourceRegistryStandardImpl] [TRACE] Registering result set [com.mysql.cj.jdbc.result.ResultSetImpl@62b3a2f6]
2023-06-08 14:53:05 => [AbstractLogicalConnectionImplementor] [TRACE] LogicalConnection#afterStatement
2023-06-08 14:53:05 => [extract] [TRACE] extracted value ([1] : [INTEGER]) - [1]
2023-06-08 14:53:05 => [extract] [TRACE] extracted value ([2] : [VARCHAR]) - [foo@gmail.com]
2023-06-08 14:53:05 => [extract] [TRACE] extracted value ([3] : [VARCHAR]) - [Satwik]
2023-06-08 14:53:05 => [extract] [TRACE] extracted value ([4] : [VARCHAR]) - [Gupta]
2023-06-08 14:53:05 => [loading] [TRACE] StandardRowReader#readRow
2023-06-08 14:53:05 => [entity] [TRACE] (o.h.s.r.g.e.i.EntityResultInitializer) Beginning Initializer#resolveKey process for entity : com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:53:05 => [entity] [DEBUG] (EntityResultInitializer) Hydrated EntityKey (com.zemoso.hibernate.demo.entity.Student): 1
2023-06-08 14:53:05 => [entity] [TRACE] (o.h.s.r.g.e.i.EntityResultInitializer) Beginning Initializer#resolveInstance process for entity (com.zemoso.hibernate.demo.entity.Student) : 1
2023-06-08 14:53:05 => [entity] [DEBUG] (EntityResultInitializer) Created new entity instance [com.zemoso.hibernate.demo.entity.Student#1] : 918475642
2023-06-08 14:53:05 => [entity] [TRACE] (EntityResultInitializer) Beginning Initializer#initializeInstance process for entity com.zemoso.hibernate.demo.entity.Student#1
2023-06-08 14:53:05 => [results] [DEBUG] Extracted JDBC value [1] - [foo@gmail.com]
2023-06-08 14:53:05 => [results] [DEBUG] Extracted JDBC value [2] - [Satwik]
2023-06-08 14:53:05 => [results] [DEBUG] Extracted JDBC value [3] - [Gupta]
2023-06-08 14:53:05 => [entity] [DEBUG] (EntityResultInitializer) Done materializing entityInstance : com.zemoso.hibernate.demo.entity.Student#1
2023-06-08 14:53:05 => [loading] [DEBUG] Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ef85555
2023-06-08 14:53:05 => [loading] [TRACE] StandardRowReader#afterRow
2023-06-08 14:53:05 => [ResourceRegistryStandardImpl] [TRACE] Releasing result set [com.mysql.cj.jdbc.result.ResultSetImpl@62b3a2f6]
2023-06-08 14:53:05 => [ResourceRegistryStandardImpl] [TRACE] Closing result set [com.mysql.cj.jdbc.result.ResultSetImpl@62b3a2f6]
2023-06-08 14:53:05 => [ResourceRegistryStandardImpl] [TRACE] Releasing statement [com.mysql.cj.jdbc.ClientPreparedStatement: select s1_0.id,s1_0.email,s1_0.first_name,s1_0.last_name from student s1_0 where s1_0.id=1]
2023-06-08 14:53:05 => [ResourceRegistryStandardImpl] [TRACE] Closing prepared statement [com.mysql.cj.jdbc.ClientPreparedStatement: select s1_0.id,s1_0.email,s1_0.first_name,s1_0.last_name from student s1_0 where s1_0.id=1]
2023-06-08 14:53:05 => [StatefulPersistenceContext] [TRACE] Initializing non-lazy collections
2023-06-08 14:53:05 => [ThreadLocalSessionContext] [TRACE] Allowing proxy invocation [createQuery] to proceed to real session
2023-06-08 14:53:05 => [cache] [TRACE] QueryPlan#resolveHqlInterpretation( `delete from Student where id=2` )
2023-06-08 14:53:05 => [hql] [DEBUG] HQL : delete from Student where id=2
2023-06-08 14:53:05 => [reservedWordAsIdentifier] [DEBUG] Encountered use of reserved word as identifier : =
2023-06-08 14:53:05 => [creation] [TRACE] SqmProcessingIndex#register(SqmPath) : com.zemoso.hibernate.demo.entity.Student(2042128343793900)
2023-06-08 14:53:05 => [hql] [TRACE] BasicDotIdentifierHandler#consumeIdentifier( id, true, true ) - id
2023-06-08 14:53:05 => [hql] [TRACE] BaseLocalSequencePart#consumeIdentifier( id, true, true ) - id
2023-06-08 14:53:05 => [hql] [DEBUG] Unable to resolve unqualified attribute [id] in local from-clause
2023-06-08 14:53:05 => [ast] [DEBUG] SqmStatement Tree :
    -> [delete]
      [target = com.zemoso.hibernate.demo.entity.Student(2042128343793900)]
      -> [where]
        -> [EQUAL]
            -> [basic-path] - `com.zemoso.hibernate.demo.entity.Student(2042128343793900).id`
        <- [EQUAL]
      <- [where]
    <- [delete]

2023-06-08 14:53:05 => [create] [DEBUG] Created new SQL alias : s1_0
2023-06-08 14:53:05 => [create] [DEBUG] Registration of TableGroup [StandardTableGroup(com.zemoso.hibernate.demo.entity.Student(2042128343793900))] with identifierForTableGroup [com.zemoso.hibernate.demo.entity.Student] for NavigablePath [com.zemoso.hibernate.demo.entity.Student] 
2023-06-08 14:53:05 => [AbstractEntityPersister] [TRACE] #findSubPart(`id`)
2023-06-08 14:53:05 => [BaseSqmToSqlAstConverter] [DEBUG] Determining mapping-model type for SqmPath : SqmBasicValuedSimplePath(com.zemoso.hibernate.demo.entity.Student(2042128343793900).id) 
2023-06-08 14:53:05 => [AbstractEntityPersister] [TRACE] #findSubPart(`id`)
2023-06-08 14:53:05 => [AbstractFlushingEventListener] [TRACE] Flushing session
2023-06-08 14:53:05 => [AbstractFlushingEventListener] [DEBUG] Processing flush-time cascades
2023-06-08 14:53:05 => [AbstractFlushingEventListener] [DEBUG] Dirty checking collections
2023-06-08 14:53:05 => [AbstractFlushingEventListener] [TRACE] Flushing entities and processing referenced collections
2023-06-08 14:53:05 => [AbstractFlushingEventListener] [TRACE] Processing unreferenced collections
2023-06-08 14:53:05 => [AbstractFlushingEventListener] [TRACE] Scheduling collection removes/(re)creates/updates
2023-06-08 14:53:05 => [AbstractFlushingEventListener] [DEBUG] Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2023-06-08 14:53:05 => [AbstractFlushingEventListener] [DEBUG] Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-06-08 14:53:05 => [EntityPrinter] [DEBUG] Listing entities:
2023-06-08 14:53:05 => [EntityPrinter] [DEBUG] com.zemoso.hibernate.demo.entity.Student{firstName=Satwik, lastName=Gupta, id=1, email=foo@gmail.com}
2023-06-08 14:53:05 => [DefaultAutoFlushEventListener] [TRACE] No need to execute flush
2023-06-08 14:53:05 => [SQL] [DEBUG] delete from student where id=2
2023-06-08 14:53:05 => [ResourceRegistryStandardImpl] [TRACE] Registering statement [com.mysql.cj.jdbc.ClientPreparedStatement: delete from student where id=2]
2023-06-08 14:53:05 => [ResourceRegistryStandardImpl] [TRACE] Releasing statement [com.mysql.cj.jdbc.ClientPreparedStatement: delete from student where id=2]
2023-06-08 14:53:05 => [ResourceRegistryStandardImpl] [TRACE] Closing prepared statement [com.mysql.cj.jdbc.ClientPreparedStatement: delete from student where id=2]
2023-06-08 14:53:05 => [AbstractLogicalConnectionImplementor] [TRACE] LogicalConnection#afterStatement
2023-06-08 14:53:05 => [ThreadLocalSessionContext] [TRACE] Allowing proxy invocation [getTransaction] to proceed to real session
2023-06-08 14:53:05 => [TransactionImpl] [DEBUG] committing
2023-06-08 14:53:05 => [JdbcResourceLocalTransactionCoordinatorImpl] [TRACE] ResourceLocalTransactionCoordinatorImpl#beforeCompletionCallback
2023-06-08 14:53:05 => [SessionImpl] [TRACE] SessionImpl#beforeTransactionCompletion()
2023-06-08 14:53:05 => [SessionImpl] [TRACE] Automatically flushing session
2023-06-08 14:53:05 => [AbstractFlushingEventListener] [TRACE] Flushing session
2023-06-08 14:53:05 => [AbstractFlushingEventListener] [DEBUG] Processing flush-time cascades
2023-06-08 14:53:05 => [AbstractFlushingEventListener] [DEBUG] Dirty checking collections
2023-06-08 14:53:05 => [AbstractFlushingEventListener] [TRACE] Flushing entities and processing referenced collections
2023-06-08 14:53:05 => [AbstractFlushingEventListener] [TRACE] Processing unreferenced collections
2023-06-08 14:53:05 => [AbstractFlushingEventListener] [TRACE] Scheduling collection removes/(re)creates/updates
2023-06-08 14:53:05 => [AbstractFlushingEventListener] [DEBUG] Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2023-06-08 14:53:05 => [AbstractFlushingEventListener] [DEBUG] Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-06-08 14:53:05 => [EntityPrinter] [DEBUG] Listing entities:
2023-06-08 14:53:05 => [EntityPrinter] [DEBUG] com.zemoso.hibernate.demo.entity.Student{firstName=Satwik, lastName=Gupta, id=1, email=foo@gmail.com}
2023-06-08 14:53:05 => [AbstractFlushingEventListener] [TRACE] Executing flush
2023-06-08 14:53:05 => [JdbcCoordinatorImpl] [TRACE] Starting after statement execution processing [AFTER_TRANSACTION]
2023-06-08 14:53:05 => [AbstractFlushingEventListener] [TRACE] Post flush
2023-06-08 14:53:05 => [AbstractLogicalConnectionImplementor] [TRACE] LogicalConnection#beforeTransactionCompletion
2023-06-08 14:53:05 => [SynchronizationRegistryStandardImpl] [TRACE] SynchronizationRegistryStandardImpl.notifySynchronizationsBeforeTransactionCompletion
2023-06-08 14:53:05 => [AbstractLogicalConnectionImplementor] [TRACE] Preparing to commit transaction via JDBC Connection.commit()
2023-06-08 14:53:05 => [AbstractLogicalConnectionImplementor] [TRACE] Transaction committed via JDBC Connection.commit()
2023-06-08 14:53:05 => [AbstractLogicalConnectionImplementor] [TRACE] LogicalConnection#afterTransaction
2023-06-08 14:53:05 => [ResourceRegistryStandardImpl] [TRACE] Releasing JDBC resources
2023-06-08 14:53:05 => [LogicalConnectionManagedImpl] [DEBUG] Initiating JDBC connection release from afterTransaction
2023-06-08 14:53:05 => [ResourceRegistryStandardImpl] [TRACE] Releasing JDBC resources
2023-06-08 14:53:05 => [JdbcResourceLocalTransactionCoordinatorImpl] [TRACE] ResourceLocalTransactionCoordinatorImpl#afterCompletionCallback(true)
2023-06-08 14:53:05 => [SynchronizationRegistryStandardImpl] [TRACE] SynchronizationRegistryStandardImpl.notifySynchronizationsAfterTransactionCompletion(3)
2023-06-08 14:53:05 => [SynchronizationRegistryStandardImpl] [DEBUG] Clearing local Synchronizations
2023-06-08 14:53:05 => [AbstractLogicalConnectionImplementor] [TRACE] LogicalConnection#afterTransaction
2023-06-08 14:53:05 => [ResourceRegistryStandardImpl] [TRACE] Releasing JDBC resources
2023-06-08 14:53:05 => [LogicalConnectionManagedImpl] [DEBUG] Initiating JDBC connection release from afterTransaction
2023-06-08 14:53:05 => [SessionImpl] [TRACE] SessionImpl#afterTransactionCompletion(successful=true, delayed=false)
2023-06-08 14:53:05 => [SessionImpl] [TRACE] Automatically closing session
2023-06-08 14:53:05 => [SessionImpl] [TRACE] Closing session [208afef4-ad3b-4de2-8eb1-b9b9455b56fd]
2023-06-08 14:53:05 => [JdbcCoordinatorImpl] [TRACE] Closing JDBC container [org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl@200d1a3d]
2023-06-08 14:53:05 => [ResourceRegistryStandardImpl] [TRACE] Releasing JDBC resources
2023-06-08 14:53:05 => [LogicalConnectionManagedImpl] [TRACE] Closing logical connection
2023-06-08 14:53:05 => [LogicalConnectionManagedImpl] [TRACE] Logical connection closed
2023-06-08 14:53:05 => [SessionFactoryImpl] [DEBUG] HHH000031: Closing
2023-06-08 14:53:05 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider]
2023-06-08 14:53:05 => [TypeConfiguration$Scope] [TRACE] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@76bf1bb8] for TypeConfiguration
2023-06-08 14:53:05 => [TypeConfiguration$Scope] [DEBUG] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@12567179] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@76bf1bb8]
2023-06-08 14:53:05 => [AbstractServiceRegistryImpl] [DEBUG] Implicitly destroying ServiceRegistry on de-registration of all child ServiceRegistries
2023-06-08 14:53:05 => [pooling] [INFO] HHH10001008: Cleaning up connection pool [jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC]
2023-06-08 14:53:05 => [BootstrapServiceRegistryImpl] [DEBUG] Implicitly destroying Boot-strap registry on de-registration of all child ServiceRegistries
2023-06-08 14:54:18 => [logging] [DEBUG] Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-06-08 14:54:18 => [IntegratorServiceImpl] [DEBUG] Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-06-08 14:54:18 => [IntegratorServiceImpl] [DEBUG] Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [jdbc] -> [org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [jta] -> [org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorBuilderImpl]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [org.hibernate.transaction.JDBCTransactionFactory] -> [org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [org.hibernate.transaction.JTATransactionFactory] -> [org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorBuilderImpl]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [org.hibernate.transaction.CMTTransactionFactory] -> [org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorBuilderImpl]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.query.sqm.mutation.spi.SqmMultiTableMutationStrategy] : [cte] -> [org.hibernate.query.sqm.mutation.internal.cte.CteMutationStrategy]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.query.sqm.mutation.spi.SqmMultiTableMutationStrategy] : [global_temporary] -> [org.hibernate.query.sqm.mutation.internal.temptable.GlobalTemporaryTableMutationStrategy]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.query.sqm.mutation.spi.SqmMultiTableMutationStrategy] : [local_temporary] -> [org.hibernate.query.sqm.mutation.internal.temptable.LocalTemporaryTableMutationStrategy]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.query.sqm.mutation.spi.SqmMultiTableMutationStrategy] : [persistent] -> [org.hibernate.query.sqm.mutation.internal.temptable.PersistentTableMutationStrategy]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [default] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [jpa] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [legacy-jpa] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [legacy-hbm] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [component-path] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.id.enhanced.ImplicitDatabaseObjectNamingStrategy] : [standard] -> [org.hibernate.id.enhanced.StandardNamingStrategy]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.id.enhanced.ImplicitDatabaseObjectNamingStrategy] : [single] -> [org.hibernate.id.enhanced.SingleNamingStrategy]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.id.enhanced.ImplicitDatabaseObjectNamingStrategy] : [legacy] -> [org.hibernate.id.enhanced.LegacyNamingStrategy]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.relational.ColumnOrderingStrategy] : [default] -> [org.hibernate.boot.model.relational.ColumnOrderingStrategyStandard]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.boot.model.relational.ColumnOrderingStrategy] : [legacy] -> [org.hibernate.boot.model.relational.ColumnOrderingStrategyLegacy]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.cache.spi.CacheKeysFactory] : [default] -> [org.hibernate.cache.internal.DefaultCacheKeysFactory]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.cache.spi.CacheKeysFactory] : [simple] -> [org.hibernate.cache.internal.SimpleCacheKeysFactory]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.type.format.FormatMapper] : [jackson] -> [org.hibernate.type.format.jackson.JacksonJsonFormatMapper]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.type.format.FormatMapper] : [jsonb] -> [org.hibernate.type.format.jakartajson.JsonBJsonFormatMapper]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.type.format.FormatMapper] : [jackson-xml] -> [org.hibernate.type.format.jackson.JacksonXmlFormatMapper]
2023-06-08 14:54:18 => [StrategySelectorImpl] [TRACE] Registering named strategy selector [org.hibernate.type.format.FormatMapper] : [jaxb] -> [org.hibernate.type.format.jaxb.JaxbXmlFormatMapper]
2023-06-08 14:54:18 => [Version] [INFO] HHH000412: Hibernate ORM core version 6.2.3.Final
2023-06-08 14:54:18 => [Environment] [DEBUG] HHH000206: hibernate.properties not found
2023-06-08 14:54:18 => [Environment] [INFO] HHH000406: Using bytecode reflection optimizer
2023-06-08 14:54:18 => [ClassLoaderServiceImpl] [TRACE] trying via [new URL("hibernate.cfg.xml")]
2023-06-08 14:54:18 => [ClassLoaderServiceImpl] [TRACE] trying via [ClassLoader.getResourceAsStream("hibernate.cfg.xml")]
2023-06-08 14:54:18 => [LocalXmlResourceResolver] [TRACE] In resolveEntity(-//Hibernate/Hibernate Configuration DTD 3.0//EN, http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd, null, null)
2023-06-08 14:54:18 => [LocalXmlResourceResolver] [DEBUG] Checking public/system identifiers `-//Hibernate/Hibernate Configuration DTD 3.0//EN`/`http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd` as DTD references
2023-06-08 14:54:18 => [JaxbCfgProcessor] [DEBUG] cfg.xml document did not define namespaces; wrapping in custom event reader to introduce namespace information
2023-06-08 14:54:18 => [Configuration] [DEBUG] Building session factory using internal StandardServiceRegistryBuilder
2023-06-08 14:54:18 => [Configuration] [DEBUG] Building session factory using provided StandardServiceRegistry
2023-06-08 14:54:18 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.id.factory.IdentifierGeneratorFactory]
2023-06-08 14:54:18 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.config.spi.ConfigurationService]
2023-06-08 14:54:19 => [factory] [DEBUG] Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-06-08 14:54:19 => [factory] [DEBUG] Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-06-08 14:54:19 => [factory] [DEBUG] Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-06-08 14:54:19 => [factory] [DEBUG] Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-06-08 14:54:19 => [factory] [DEBUG] Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-06-08 14:54:19 => [factory] [DEBUG] Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-06-08 14:54:19 => [factory] [DEBUG] Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-06-08 14:54:19 => [factory] [DEBUG] Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-06-08 14:54:19 => [factory] [DEBUG] Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-06-08 14:54:19 => [factory] [DEBUG] Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-06-08 14:54:19 => [factory] [DEBUG] Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-06-08 14:54:19 => [factory] [DEBUG] Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-06-08 14:54:19 => [factory] [DEBUG] Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-06-08 14:54:19 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider]
2023-06-08 14:54:19 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.cache.spi.RegionFactory]
2023-06-08 14:54:19 => [RegionFactoryInitiator] [DEBUG] Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-06-08 14:54:19 => [RegionFactoryInitiator] [DEBUG] Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@79dc5318
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration boolean -> org.hibernate.type.BasicTypeReference@79dc5318
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@79dc5318
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@8e50104
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@8e50104
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration true_false -> org.hibernate.type.BasicTypeReference@37e4d7bb
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@37e4d7bb
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6f7923a5
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6f7923a5
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration byte -> org.hibernate.type.BasicTypeReference@74a6f9c1
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration byte -> org.hibernate.type.BasicTypeReference@74a6f9c1
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@74a6f9c1
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration binary -> org.hibernate.type.BasicTypeReference@54eb2b70
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@54eb2b70
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration [B -> org.hibernate.type.BasicTypeReference@54eb2b70
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@45a37759
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@45a37759
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration image -> org.hibernate.type.BasicTypeReference@63611043
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration blob -> org.hibernate.type.BasicTypeReference@20ca951f
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@20ca951f
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@2d778add
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@73302995
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration short -> org.hibernate.type.BasicTypeReference@1838ccb8
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration short -> org.hibernate.type.BasicTypeReference@1838ccb8
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@1838ccb8
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration integer -> org.hibernate.type.BasicTypeReference@6c2ed0cd
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration int -> org.hibernate.type.BasicTypeReference@6c2ed0cd
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6c2ed0cd
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration long -> org.hibernate.type.BasicTypeReference@7d9e8ef7
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration long -> org.hibernate.type.BasicTypeReference@7d9e8ef7
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@7d9e8ef7
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration float -> org.hibernate.type.BasicTypeReference@f107c50
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration float -> org.hibernate.type.BasicTypeReference@f107c50
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@f107c50
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration double -> org.hibernate.type.BasicTypeReference@51133c06
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration double -> org.hibernate.type.BasicTypeReference@51133c06
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@51133c06
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@4b213651
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@4b213651
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@4241e0f4
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@4241e0f4
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration character -> org.hibernate.type.BasicTypeReference@4ebff610
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration char -> org.hibernate.type.BasicTypeReference@4ebff610
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4ebff610
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@60410cd
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration string -> org.hibernate.type.BasicTypeReference@44d52de2
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@44d52de2
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration nstring -> org.hibernate.type.BasicTypeReference@95e33cc
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration characters -> org.hibernate.type.BasicTypeReference@38604b81
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration char[] -> org.hibernate.type.BasicTypeReference@38604b81
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration [C -> org.hibernate.type.BasicTypeReference@38604b81
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@1e44b638
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration text -> org.hibernate.type.BasicTypeReference@7393222f
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration ntext -> org.hibernate.type.BasicTypeReference@babafc2
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration clob -> org.hibernate.type.BasicTypeReference@31add175
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@31add175
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration nclob -> org.hibernate.type.BasicTypeReference@ae3540e
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@ae3540e
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@600b9d27
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@3688eb5b
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@69f1a286
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@7922d892
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@457c9034
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@345f69f3
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration Duration -> org.hibernate.type.BasicTypeReference@50de186c
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@50de186c
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@3f57bcad
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@3f57bcad
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@1e8b7643
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@1e8b7643
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@51549490
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@51549490
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@71e9ebae
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@71e9ebae
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@73d983ea
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@36a5cabc
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@432038ec
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@432038ec
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@7daa0fbd
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@42530531
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5a3bc7ed
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@181e731e
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@181e731e
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@35645047
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6f44a157
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration date -> org.hibernate.type.BasicTypeReference@6bc407fd
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@6bc407fd
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration time -> org.hibernate.type.BasicTypeReference@291f18
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@291f18
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@17d88132
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@17d88132
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@17d88132
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration calendar -> org.hibernate.type.BasicTypeReference@5ddcc487
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@5ddcc487
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@5ddcc487
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@16eccb2e
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@5ef5c734
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration instant -> org.hibernate.type.BasicTypeReference@d771cc9
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@d771cc9
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration uuid -> org.hibernate.type.BasicTypeReference@36b4091c
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@36b4091c
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@36b4091c
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@4671115f
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@36cda2c2
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration class -> org.hibernate.type.BasicTypeReference@3697186
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3697186
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration currency -> org.hibernate.type.BasicTypeReference@1583741e
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration Currency -> org.hibernate.type.BasicTypeReference@1583741e
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@1583741e
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration locale -> org.hibernate.type.BasicTypeReference@5b367418
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@5b367418
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration serializable -> org.hibernate.type.BasicTypeReference@36060e
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@36060e
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration timezone -> org.hibernate.type.BasicTypeReference@481ba2cf
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@481ba2cf
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@46b61c56
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@46b61c56
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration url -> org.hibernate.type.BasicTypeReference@2e48362c
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@2e48362c
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration row_version -> org.hibernate.type.BasicTypeReference@1efe439d
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration object -> org.hibernate.type.JavaObjectType@63f259c3
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@63f259c3
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration null -> org.hibernate.type.NullType@27216cd
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@8576fa0
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@7582ff54
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@67545b57
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@6c2c1385
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@5f354bcf
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@3daf7722
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@78641d23
2023-06-08 14:54:19 => [SqmFunctionRegistry] [TRACE] SqmFunctionRegistry created
2023-06-08 14:54:19 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.boot.cfgxml.spi.CfgXmlAccessService]
2023-06-08 14:54:19 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]
2023-06-08 14:54:19 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.dialect.spi.DialectFactory]
2023-06-08 14:54:19 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.dialect.spi.DialectResolver]
2023-06-08 14:54:19 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider]
2023-06-08 14:54:19 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.ConnectionProvider]
2023-06-08 14:54:19 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider]
2023-06-08 14:54:19 => [pooling] [WARN] HHH10001002: Using built-in connection pool (not intended for production use)
2023-06-08 14:54:19 => [pooling] [INFO] HHH10001005: Loaded JDBC driver class: com.mysql.cj.jdbc.Driver
2023-06-08 14:54:19 => [pooling] [INFO] HHH10001012: Connecting with JDBC URL [jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC]
2023-06-08 14:54:19 => [pooling] [INFO] HHH10001001: Connection properties: {password=hbstudent, user=hbstudent}
2023-06-08 14:54:19 => [pooling] [INFO] HHH10001003: Autocommit mode: false
2023-06-08 14:54:19 => [pooling] [DEBUG] Initializing Connection pool with 1 Connections
2023-06-08 14:54:19 => [pooling] [INFO] HHH10001115: Connection pool size: 1 (min=1)
2023-06-08 14:54:19 => [JdbcEnvironmentInitiator] [DEBUG] Database ->
       name : MySQL
    version : 8.0.33
      major : 8
      minor : 0
2023-06-08 14:54:19 => [JdbcEnvironmentInitiator] [DEBUG] Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.28 (Revision: 7ff2161da3899f379fb3171b6538b191b1c5c7e2)
      major : 8
      minor : 0
2023-06-08 14:54:19 => [JdbcEnvironmentInitiator] [DEBUG] JDBC version : 4.2
2023-06-08 14:54:19 => [dialect] [DEBUG] HHH035001: Using dialect: org.hibernate.dialect.MySQLDialect, version: 8.0.33
2023-06-08 14:54:19 => [IdentifierHelperBuilder] [DEBUG] JDBC driver metadata reported database stores quoted identifiers in more than one case
2023-06-08 14:54:19 => [IdentifierHelperBuilder] [DEBUG] IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2023-06-08 14:54:19 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [hb_student_tracker]
2023-06-08 14:54:19 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [null]
2023-06-08 14:54:19 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.spi.JdbcServices]
2023-06-08 14:54:19 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.spi.SqlStatementLogger]
2023-06-08 14:54:19 => [DdlTypeRegistry] [DEBUG] addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5f4d427e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6e521c1e)
2023-06-08 14:54:19 => [DdlTypeRegistry] [DEBUG] addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@224b4d61) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5d5d9e5)
2023-06-08 14:54:19 => [DdlTypeRegistry] [DEBUG] addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@303e3593) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4ef27d66)
2023-06-08 14:54:19 => [DdlTypeRegistry] [DEBUG] addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@362a019c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1d9bec4d)
2023-06-08 14:54:19 => [DdlTypeRegistry] [DEBUG] addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5c48c0c0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@10c8f62)
2023-06-08 14:54:19 => [DdlTypeRegistry] [DEBUG] addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@674c583e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@25f7391e)
2023-06-08 14:54:19 => [DdlTypeRegistry] [DEBUG] addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3f23a3a0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5ab14cb9)
2023-06-08 14:54:19 => [DdlTypeRegistry] [DEBUG] addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5fb97279) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@439a8f59)
2023-06-08 14:54:19 => [DdlTypeRegistry] [DEBUG] addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@61861a29) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@31024624)
2023-06-08 14:54:19 => [JdbcTypeRegistry] [DEBUG] addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-06-08 14:54:19 => [JdbcTypeRegistry] [DEBUG] addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-06-08 14:54:19 => [JdbcTypeRegistry] [DEBUG] addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-06-08 14:54:19 => [JdbcTypeRegistry] [DEBUG] addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-06-08 14:54:19 => [JdbcTypeRegistry] [DEBUG] addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration null -> org.hibernate.type.NullType@1fc0053e
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@27216cd`
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@1(java.time.OffsetDateTime,3003)
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetDateTime -> basicType@1(java.time.OffsetDateTime,3003)
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.OffsetDateTime -> basicType@1(java.time.OffsetDateTime,3003)
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@2(java.time.ZonedDateTime,3003)
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration ZonedDateTime -> basicType@2(java.time.ZonedDateTime,3003)
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.ZonedDateTime -> basicType@2(java.time.ZonedDateTime,3003)
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration org.hibernate.type.OffsetTimeType -> basicType@3(java.time.OffsetTime,3007)
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration OffsetTime -> basicType@3(java.time.OffsetTime,3007)
2023-06-08 14:54:19 => [BasicTypeRegistry] [DEBUG] Adding type registration java.time.OffsetTime -> basicType@3(java.time.OffsetTime,3007)
2023-06-08 14:54:19 => [TypeConfiguration$Scope] [DEBUG] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@517bd097] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@142eef62]
2023-06-08 14:54:19 => [Namespace] [DEBUG] Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-06-08 14:54:19 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.resource.beans.spi.ManagedBeanRegistry]
2023-06-08 14:54:19 => [EntityBinder] [DEBUG] Binding entity from annotated class: com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:54:19 => [EntityBinder] [DEBUG] Import with entity name Student
2023-06-08 14:54:19 => [InFlightMetadataCollectorImpl] [TRACE] Import: Student -> com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:54:19 => [InFlightMetadataCollectorImpl] [TRACE] Import: com.zemoso.hibernate.demo.entity.Student -> com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:54:19 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [student]
2023-06-08 14:54:19 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [student]
2023-06-08 14:54:19 => [EntityBinder] [DEBUG] Bind entity com.zemoso.hibernate.demo.entity.Student on table student
2023-06-08 14:54:19 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [DTYPE]
2023-06-08 14:54:19 => [AnnotatedColumn] [DEBUG] Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-06-08 14:54:19 => [PropertyBinder] [TRACE] Processing annotations of com.zemoso.hibernate.demo.entity.Student.id
2023-06-08 14:54:19 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [id]
2023-06-08 14:54:19 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [id]
2023-06-08 14:54:19 => [AnnotatedColumn] [DEBUG] Binding column: AnnotatedColumn(column='id')
2023-06-08 14:54:19 => [ClassLoaderAccessImpl] [DEBUG] Not known whether passed class name [com.zemoso.hibernate.demo.entity.Student] is safe
2023-06-08 14:54:19 => [ClassLoaderAccessImpl] [DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:54:19 => [PropertyBinder] [DEBUG] MetadataSourceProcessor property id with lazy=false
2023-06-08 14:54:19 => [AbstractPropertyHolder] [DEBUG] Attempting to locate auto-apply AttributeConverter for property [com.zemoso.hibernate.demo.entity.Student:id]
2023-06-08 14:54:19 => [BasicValueBinder] [DEBUG] building BasicValue for id
2023-06-08 14:54:19 => [BasicValue] [DEBUG] Skipping column re-registration: student.id
2023-06-08 14:54:19 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [id]
2023-06-08 14:54:19 => [PropertyBinder] [DEBUG] Building property id
2023-06-08 14:54:19 => [PropertyBinder] [TRACE] Cascading id with null
2023-06-08 14:54:19 => [BinderHelper] [DEBUG] #makeIdGenerator(BasicValue([Column(id)]), id, identity, , ...)
2023-06-08 14:54:19 => [PropertyBinder] [TRACE] Bind @Id on id
2023-06-08 14:54:19 => [PropertyBinder] [TRACE] Processing annotations of com.zemoso.hibernate.demo.entity.Student.email
2023-06-08 14:54:19 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [email]
2023-06-08 14:54:19 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [email]
2023-06-08 14:54:19 => [AnnotatedColumn] [DEBUG] Binding column: AnnotatedColumn(column='email')
2023-06-08 14:54:19 => [PropertyBinder] [DEBUG] MetadataSourceProcessor property email with lazy=false
2023-06-08 14:54:19 => [AbstractPropertyHolder] [DEBUG] Attempting to locate auto-apply AttributeConverter for property [com.zemoso.hibernate.demo.entity.Student:email]
2023-06-08 14:54:19 => [BasicValueBinder] [DEBUG] building BasicValue for email
2023-06-08 14:54:19 => [BasicValue] [DEBUG] Skipping column re-registration: student.email
2023-06-08 14:54:19 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [email]
2023-06-08 14:54:19 => [PropertyBinder] [DEBUG] Building property email
2023-06-08 14:54:19 => [PropertyBinder] [TRACE] Cascading email with null
2023-06-08 14:54:19 => [PropertyBinder] [TRACE] Processing annotations of com.zemoso.hibernate.demo.entity.Student.firstName
2023-06-08 14:54:19 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [first_name]
2023-06-08 14:54:19 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [first_name]
2023-06-08 14:54:19 => [AnnotatedColumn] [DEBUG] Binding column: AnnotatedColumn(column='first_name')
2023-06-08 14:54:19 => [PropertyBinder] [DEBUG] MetadataSourceProcessor property firstName with lazy=false
2023-06-08 14:54:19 => [AbstractPropertyHolder] [DEBUG] Attempting to locate auto-apply AttributeConverter for property [com.zemoso.hibernate.demo.entity.Student:firstName]
2023-06-08 14:54:19 => [BasicValueBinder] [DEBUG] building BasicValue for firstName
2023-06-08 14:54:19 => [BasicValue] [DEBUG] Skipping column re-registration: student.first_name
2023-06-08 14:54:19 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [first_name]
2023-06-08 14:54:19 => [PropertyBinder] [DEBUG] Building property firstName
2023-06-08 14:54:19 => [PropertyBinder] [TRACE] Cascading firstName with null
2023-06-08 14:54:19 => [PropertyBinder] [TRACE] Processing annotations of com.zemoso.hibernate.demo.entity.Student.lastName
2023-06-08 14:54:19 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [last_name]
2023-06-08 14:54:19 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [last_name]
2023-06-08 14:54:19 => [AnnotatedColumn] [DEBUG] Binding column: AnnotatedColumn(column='last_name')
2023-06-08 14:54:19 => [PropertyBinder] [DEBUG] MetadataSourceProcessor property lastName with lazy=false
2023-06-08 14:54:19 => [AbstractPropertyHolder] [DEBUG] Attempting to locate auto-apply AttributeConverter for property [com.zemoso.hibernate.demo.entity.Student:lastName]
2023-06-08 14:54:19 => [BasicValueBinder] [DEBUG] building BasicValue for lastName
2023-06-08 14:54:19 => [BasicValue] [DEBUG] Skipping column re-registration: student.last_name
2023-06-08 14:54:19 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [last_name]
2023-06-08 14:54:19 => [PropertyBinder] [DEBUG] Building property lastName
2023-06-08 14:54:19 => [PropertyBinder] [TRACE] Cascading lastName with null
2023-06-08 14:54:19 => [BasicValueBinder] [DEBUG] Starting `BasicValueBinder#fillSimpleValue` for id
2023-06-08 14:54:19 => [BasicValueBinder] [DEBUG] Starting `BasicValueBinder#fillSimpleValue` for email
2023-06-08 14:54:19 => [BasicValueBinder] [DEBUG] Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-06-08 14:54:19 => [BasicValueBinder] [DEBUG] Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-06-08 14:54:19 => [PrimaryKey] [DEBUG] Forcing column [id] to be non-null as it is part of the primary key for table [student]
2023-06-08 14:54:19 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.boot.spi.SessionFactoryBuilderService]
2023-06-08 14:54:19 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider]
2023-06-08 14:54:19 => [BatchFetchStyle] [TRACE] Interpreting BatchFetchStyle from setting : null
2023-06-08 14:54:19 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder]
2023-06-08 14:54:19 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.bytecode.spi.BytecodeProvider]
2023-06-08 14:54:19 => [BytecodeProviderInitiator] [INFO] HHH000021: Bytecode provider name : bytebuddy
2023-06-08 14:54:20 => [SessionFactoryImpl] [DEBUG] Building session factory
2023-06-08 14:54:20 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.service.spi.SessionFactoryServiceRegistryFactory]
2023-06-08 14:54:20 => [SessionFactoryServiceRegistryImpl] [DEBUG] EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-06-08 14:54:20 => [SessionFactoryImpl] [DEBUG] Instantiating SessionFactory with settings: {dialect=org.hibernate.dialect.MySQLDialect, java.specification.version=17, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQLDialect, java.class.path=C:\Users\Raushan Kumar Gupta\Desktop\zemoso\zemoso-work\raushankrgupta_ldp\spring-hibernate-poc\spring-hibernate\spring-hibernate-demo\target\classes;C:\Users\Raushan Kumar Gupta\.m2\repository\org\springframework\spring-context\6.0.9\spring-context-6.0.9.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\springframework\spring-aop\6.0.9\spring-aop-6.0.9.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\springframework\spring-beans\6.0.9\spring-beans-6.0.9.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\springframework\spring-core\6.0.9\spring-core-6.0.9.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\springframework\spring-jcl\6.0.9\spring-jcl-6.0.9.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\springframework\spring-expression\6.0.9\spring-expression-6.0.9.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\javax\annotation\javax.annotation-api\1.3.2\javax.annotation-api-1.3.2.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\hibernate\orm\hibernate-core\6.2.3.Final\hibernate-core-6.2.3.Final.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\jboss\logging\jboss-logging\3.5.0.Final\jboss-logging-3.5.0.Final.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\hibernate\common\hibernate-commons-annotations\6.0.6.Final\hibernate-commons-annotations-6.0.6.Final.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\io\smallrye\jandex\3.0.5\jandex-3.0.5.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\net\bytebuddy\byte-buddy\1.12.18\byte-buddy-1.12.18.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.0\jakarta.xml.bind-api-4.0.0.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.0\jakarta.activation-api-2.1.0.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.2\jaxb-runtime-4.0.2.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.2\jaxb-core-4.0.2.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\eclipse\angus\angus-activation\2.0.0\angus-activation-2.0.0.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\glassfish\jaxb\txw2\4.0.2\txw2-4.0.2.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.1\istack-commons-runtime-4.1.1.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\org\antlr\antlr4-runtime\4.10.1\antlr4-runtime-4.10.1.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\mysql\mysql-connector-java\8.0.28\mysql-connector-java-8.0.28.jar;C:\Users\Raushan Kumar Gupta\.m2\repository\com\google\protobuf\protobuf-java\3.11.4\protobuf-java-3.11.4.jar, java.vm.vendor=Amazon.com Inc., sun.arch.data.model=64, user.variant=, java.vendor.url=https://aws.amazon.com/corretto/, user.timezone=Asia/Calcutta, java.vm.specification.version=17, os.name=Windows 11, current_session_context_class=thread, sun.java.launcher=SUN_STANDARD, user.country=IN, sun.boot.library.path=C:\Users\Raushan Kumar Gupta\.jdks\corretto-17.0.7\bin, sun.java.command=com.zemoso.hibernate.demo.ReadStudentDemo, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\Raushan Kumar Gupta, user.language=en, java.specification.vendor=Oracle Corporation, java.version.date=2023-04-18, java.home=C:\Users\Raushan Kumar Gupta\.jdks\corretto-17.0.7, file.separator=\, java.vm.compressedOopsMode=32-bit, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, user.script=, connection.password=hbstudent, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=17.0.7+7-LTS, user.name=Raushan Kumar Gupta, path.separator=;, hibernate.connection.username=****, os.version=10.0, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC, connection.pool_size=1, file.encoding=UTF-8, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=true, java.vendor.version=Corretto-17.0.7.7.1, hibernate.current_session_context_class=thread, show_sql=true, hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver, java.vendor.url.bug=https://github.com/corretto/corretto-17/issues/, java.io.tmpdir=C:\Users\RAUSHA~1\AppData\Local\Temp\, java.version=17.0.7, user.dir=C:\Users\Raushan Kumar Gupta\Desktop\zemoso\zemoso-work\raushankrgupta_ldp\spring-hibernate-poc\spring-hibernate\spring-hibernate-demo, os.arch=amd64, connection.username=hbstudent, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, sun.os.patch.level=, connection.driver_class=com.mysql.cj.jdbc.Driver, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@35fb22a9, native.encoding=Cp1252, java.library.path=C:\Users\Raushan Kumar Gupta\.jdks\corretto-17.0.7\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Microsoft\jdk-11.0.16.101-hotspot\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Users\Raushan Kumar Gupta\AppData\Local\Android\Sdk\platform-tools;C:\Program Files\nodejs\;C:\maven\bin;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\Raushan Kumar Gupta\AppData\Local\Programs\Python\Python311\Scripts\;C:\Users\Raushan Kumar Gupta\AppData\Local\Programs\Python\Python311\;C:\Users\Raushan Kumar Gupta\AppData\Local\Microsoft\WindowsApps;C:\MinGW\bin;C:\Users\Raushan Kumar Gupta\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\Raushan Kumar Gupta\AppData\Roaming\npm;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.1\bin;;., java.vendor=Amazon.com Inc., java.vm.info=mixed mode, sharing, java.vm.version=17.0.7+7-LTS, hibernate.bytecode.use_reflection_optimizer=true, sun.io.unicode.encoding=UnicodeLittle, hibernate.connection.pool_size=1, connection.url=jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC, java.class.version=61.0}
2023-06-08 14:54:20 => [NormalizingIdentifierHelperImpl] [TRACE] Normalizing identifier quoting [null]
2023-06-08 14:54:20 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.cache.spi.CacheImplementor]
2023-06-08 14:54:20 => [SessionFactoryImpl] [DEBUG] Session factory constructed with filter configurations : {}
2023-06-08 14:54:20 => [SchemaManagementToolCoordinator] [DEBUG] No schema actions specified for contributor `orm`; doing nothing
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@aaee2a2] under count; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@27ace0b1] under every; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@664e5dee] under any; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@43f61afb] under sinh; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@713064e8] under cosh; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4fad6218] under tanh; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1bf39d06] under pi; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@68217d41] under log; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : length -> character_length
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@55e3d6c3] under position; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@3cff0139] under overlay; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@f096f37] under trim; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@39e43310] under cast; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@eb507b9] under collate; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@3ec2ecea] under extract; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@53a5e217] under ifnull; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@4f453e63] under pad; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@49c8f6e8] under str; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@2416498e] under format; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@2015b2cd] under timestampadd; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@6e1b9411] under timestampdiff; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : dateadd -> timestampadd
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : datediff -> timestampdiff
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@112d1c8e] under current_date; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3d49fd31] under current_time; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@4016ccc1] under current_timestamp; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : current date -> current_date
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : current time -> current_time
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : current timestamp -> current_timestamp
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@46cb98a3] under local_date; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3ffb3598] under local_time; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@4da9f723] under local_datetime; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3b2f4a93] under offset_datetime; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : local date -> local_date
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : local time -> local_time
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : local datetime -> local_datetime
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : offset datetime -> offset_datetime
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@213bd3d5] under instant; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : current_instant -> instant
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@7b78ed6a] under sql; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log)] under log; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@68217d41
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log2)] under log2; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(reverse)] under reverse; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.MultipatternSqmFunctionDescriptor@47447ccf] under lpad; prior registration was NamedSqmFunctionTemplate(lpad)
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.MultipatternSqmFunctionDescriptor@7afb1741] under rpad; prior registration was NamedSqmFunctionTemplate(rpad)
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(md5)] under md5; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayofweek)] under dayofweek; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayofmonth)] under dayofmonth; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : day -> dayofmonth
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayofyear)] under dayofyear; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_day)] under last_day; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(date)] under date; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(timestamp)] under timestamp; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(time)] under time; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(utc_date)] under utc_date; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(utc_time)] under utc_time; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(utc_timestamp)] under utc_timestamp; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(crc32)] under crc32; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sha1)] under sha1; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sha2)] under sha2; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sha)] under sha; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@263bbfeb] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@55e3d6c3
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@37ed010a] under trunc; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : truncate -> trunc
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@633a2e99] under bitand; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@367d2816] under bitor; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@5b84f14] under bitxor; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@5a82ebf8] under bitnot; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev)] under stddev; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(variance)] under variance; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(datediff)] under datediff; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(adddate)] under adddate; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(subdate)] under subdate; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(addtime)] under addtime; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(subtime)] under subtime; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@68fe48d7] under format; prior registration was org.hibernate.dialect.function.FormatFunction@2416498e
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(makedate)] under makedate; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(maketime)] under maketime; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@3ffb3598
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@4da9f723
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was NamedSqmFunctionTemplate(localtime)
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@379ce046] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1bf39d06
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@701bc94e] under chr; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registering alternate key : char -> chr
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@3d8b319e] under sysdate; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetWindowEmulation@28e19366] under rank; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetWindowEmulation@5b275174] under dense_rank; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetWindowEmulation@10ef5fa0] under percent_rank; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetWindowEmulation@244e619a] under cume_dist; prior registration was null
2023-06-08 14:54:20 => [SqmFunctionRegistry] [DEBUG] Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggGroupConcatEmulation@5cb042da] under listagg; prior registration was null
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] abs(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double acos(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] adddate(DATE datetime, INTEGER days)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] addtime(TIME datetime, TIME time)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Boolean any(BOOLEAN arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer ascii(STRING arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double asin(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double atan(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double avg(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] bit_and(arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer bit_length(STRING_OR_CLOB arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] bit_or(arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] bitand(arg0, arg1)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] bitnot(arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] bitor(arg0, arg1)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] bitxor(arg0, arg1)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] cast(arg as Type)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] ceiling(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Character char(INTEGER arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer character_length(STRING_OR_CLOB arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Character chr(INTEGER arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] coalesce(arg0[, arg1[, ...]])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String collate(STRING string as COLLATION collation)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String concat(STRING string0[, STRING string1[, ...]])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double cos(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double cosh(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double cot(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Long count([distinct ]{arg|*})
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer crc32(arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double cume_dist([arg0[, ...]])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Date curdate()
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Date current date
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Time current time
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Timestamp current timestamp
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Date current_date
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Instant current_instant
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Time current_time
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Timestamp current_timestamp
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Time curtime()
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Date date(arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer datediff(DATE end, DATE start)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer day(DATE arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String dayname(DATE arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer dayofmonth(DATE arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer dayofweek(DATE arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer dayofyear(DATE arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double degrees(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Long dense_rank([arg0[, ...]])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Boolean every(BOOLEAN arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double exp(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] first_valueANY value
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] floor(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String format(TEMPORAL datetime as STRING pattern)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer hour(TIME arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] ifnull(arg0, arg1)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Instant instant
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] lagANY value[, INTEGER offset[, ANY default]]
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Date last_day(DATE arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] last_valueANY value
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] leadANY value[, INTEGER offset[, ANY default]]
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String left(STRING string, INTEGER length)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer length(STRING_OR_CLOB arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String listagg(STRING arg0, STRING arg1)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double ln(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] LocalDate local date
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] LocalDateTime local datetime
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] LocalTime local time
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] LocalDate local_date
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] LocalDateTime local_datetime
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] LocalTime local_time
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Timestamp localtime
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Timestamp localtimestamp
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double log(NUMERIC arg0[, NUMERIC arg1])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double log10(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double log2(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String lower(STRING string)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String lpad(string, length[, padding])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String ltrim(STRING string[, STRING characters])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Date makedate(INTEGER year, INTEGER dayofyear)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Time maketime(INTEGER hour, INTEGER min, INTEGER sec)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] max(COMPARABLE arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String md5(arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer microsecond(TIME arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] min(COMPARABLE arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer minute(TIME arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer mod(INTEGER arg0, INTEGER arg1)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer month(DATE arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String monthname(DATE arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Timestamp now()
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] nth_valueANY value, INTEGER nth
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] nullif(arg0, arg1)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer octet_length(STRING_OR_CLOB arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] OffsetDateTime offset datetime
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] OffsetDateTime offset_datetime
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double percent_rank([arg0[, ...]])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double pi
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer position(STRING pattern in STRING string)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double power(NUMERIC arg0, NUMERIC arg1)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer quarter(DATE arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double radians(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double rand([INTEGER seed])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Long rank([arg0[, ...]])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String repeat(STRING string, INTEGER times)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String replace(STRING string, STRING pattern, STRING replacement)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String reverse(STRING arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String right(STRING string, INTEGER length)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] round(NUMERIC number[, INTEGER places])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Long row_number()
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String rpad(string, length[, padding])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String rtrim(STRING string[, STRING characters])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer second(TIME arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String sha(arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String sha1(arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String sha2(arg0, arg1)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer sign(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double sin(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double sinh(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String soundex(arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String space(INTEGER arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Object sql
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double sqrt(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double stddev(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double stddev_pop(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double stddev_samp(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String str(arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] subdate(DATE datetime, INTEGER days)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String substr(STRING string, INTEGER start[, INTEGER length])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] subtime(TIME datetime, TIME time)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] sum(arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Timestamp sysdate()
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double tan(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double tanh(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String time(arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Timestamp timestamp(arg0[, arg1])
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] basicType@13(java.lang.Long,-5)|basicType@16(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] trunc( ... )
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] truncate( ... )
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] String upper(STRING string)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Date utc_date
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Time utc_time
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Timestamp utc_timestamp
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double var_pop(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double var_samp(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Double variance(NUMERIC arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer week(DATE arg)
2023-06-08 14:54:20 => [HQL_FUNCTIONS] [DEBUG] Integer year(DATE arg)
2023-06-08 14:54:20 => [cache] [DEBUG] Starting QueryPlanCache(2048)
2023-06-08 14:54:20 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.query.spi.NativeQueryInterpreter]
2023-06-08 14:54:20 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.persister.spi.PersisterFactory]
2023-06-08 14:54:20 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.persister.spi.PersisterClassResolver]
2023-06-08 14:54:20 => [ClassLoaderAccessImpl] [DEBUG] Not known whether passed class name [com.zemoso.hibernate.demo.entity.Student] is safe
2023-06-08 14:54:20 => [ClassLoaderAccessImpl] [DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:54:20 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.property.access.spi.PropertyAccessStrategyResolver]
2023-06-08 14:54:20 => [BytecodeProviderImpl] [DEBUG] HHH000513: Unable to create the ReflectionOptimizer for [com.zemoso.hibernate.demo.entity.Student]
org.hibernate.bytecode.internal.bytebuddy.PrivateAccessorException: private accessor [email]
	at org.hibernate.bytecode.internal.bytebuddy.BytecodeProviderImpl.findAccessors(BytecodeProviderImpl.java:1251)
	at org.hibernate.bytecode.internal.bytebuddy.BytecodeProviderImpl.getReflectionOptimizer(BytecodeProviderImpl.java:232)
	at org.hibernate.metamodel.internal.EntityRepresentationStrategyPojoStandard.resolveReflectionOptimizer(EntityRepresentationStrategyPojoStandard.java:293)
	at org.hibernate.metamodel.internal.EntityRepresentationStrategyPojoStandard.<init>(EntityRepresentationStrategyPojoStandard.java:161)
	at org.hibernate.metamodel.internal.ManagedTypeRepresentationResolverStandard.resolveStrategy(ManagedTypeRepresentationResolverStandard.java:62)
	at org.hibernate.persister.entity.AbstractEntityPersister.<init>(AbstractEntityPersister.java:503)
	at org.hibernate.persister.entity.SingleTableEntityPersister.<init>(SingleTableEntityPersister.java:140)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at org.hibernate.persister.internal.PersisterFactoryImpl.createEntityPersister(PersisterFactoryImpl.java:92)
	at org.hibernate.persister.internal.PersisterFactoryImpl.createEntityPersister(PersisterFactoryImpl.java:75)
	at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.processBootEntities(MappingMetamodelImpl.java:247)
	at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.finishInitialization(MappingMetamodelImpl.java:185)
	at org.hibernate.internal.SessionFactoryImpl.initializeMappingModel(SessionFactoryImpl.java:319)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:269)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:431)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:894)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:913)
	at com.zemoso.hibernate.demo.ReadStudentDemo.main(ReadStudentDemo.java:20)
2023-06-08 14:54:20 => [AbstractPropertyMapping] [TRACE] Skipping duplicate registration of path [email], existing type = [basicType@5(java.lang.String,12)], incoming type = [basicType@5(java.lang.String,12)]
2023-06-08 14:54:20 => [AbstractPropertyMapping] [TRACE] Skipping duplicate registration of path [firstName], existing type = [basicType@5(java.lang.String,12)], incoming type = [basicType@5(java.lang.String,12)]
2023-06-08 14:54:20 => [AbstractPropertyMapping] [TRACE] Skipping duplicate registration of path [lastName], existing type = [basicType@5(java.lang.String,12)], incoming type = [basicType@5(java.lang.String,12)]
2023-06-08 14:54:20 => [AbstractPropertyMapping] [TRACE] Skipping duplicate registration of path [id], existing type = [basicType@4(java.lang.Integer,4)], incoming type = [basicType@4(java.lang.Integer,4)]
2023-06-08 14:54:20 => [creation] [DEBUG] Starting post-init callbacks
2023-06-08 14:54:20 => [creation] [DEBUG] Starting PostInitCallbackEntry : Entity(com.zemoso.hibernate.demo.entity.Student) `staticFetchableList` generator
2023-06-08 14:54:20 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.sql.ast.spi.ParameterMarkerStrategy]
2023-06-08 14:54:20 => [AbstractEntityPersister] [DEBUG] Static SQL for entity: com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:54:20 => [AbstractEntityPersister] [DEBUG]  Version select: select id from student where id=?
2023-06-08 14:54:20 => [AbstractEntityPersister] [DEBUG]  Insert (0): insert into student (email,first_name,last_name) values (?,?,?)
2023-06-08 14:54:20 => [AbstractEntityPersister] [DEBUG]  Update (0): update student set email=?,first_name=?,last_name=? where id=?
2023-06-08 14:54:20 => [AbstractEntityPersister] [DEBUG]  Delete (0): delete from student where id=?
2023-06-08 14:54:20 => [create] [DEBUG] Created new SQL alias : s1_0
2023-06-08 14:54:20 => [create] [DEBUG] Registration of TableGroup [StandardTableGroup(com.zemoso.hibernate.demo.entity.Student)] with identifierForTableGroup [com.zemoso.hibernate.demo.entity.Student] for NavigablePath [com.zemoso.hibernate.demo.entity.Student] 
2023-06-08 14:54:20 => [LoaderSelectBuilder] [TRACE] Starting visitation of FetchParent's Fetchables : com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:54:20 => [AST] [DEBUG] DomainResult Graph:
 \-EntityResultImpl [com.zemoso.hibernate.demo.entity.Student]
 |  +-BasicFetch [com.zemoso.hibernate.demo.entity.Student.email]
 |  +-BasicFetch [com.zemoso.hibernate.demo.entity.Student.firstName]
 |  \-BasicFetch [com.zemoso.hibernate.demo.entity.Student.lastName]

2023-06-08 14:54:20 => [AST] [TRACE] Stack trace calling DomainResultGraphPrinter
java.lang.Exception
	at org.hibernate.sql.results.graph.DomainResultGraphPrinter.visitDomainResults(DomainResultGraphPrinter.java:73)
	at org.hibernate.sql.results.graph.DomainResultGraphPrinter.logDomainResultGraph(DomainResultGraphPrinter.java:49)
	at org.hibernate.sql.results.graph.DomainResultGraphPrinter.logDomainResultGraph(DomainResultGraphPrinter.java:40)
	at org.hibernate.sql.ast.spi.AbstractSqlAstTranslator.translateSelect(AbstractSqlAstTranslator.java:829)
	at org.hibernate.sql.ast.spi.AbstractSqlAstTranslator.translate(AbstractSqlAstTranslator.java:782)
	at org.hibernate.loader.ast.internal.SingleIdLoadPlan.<init>(SingleIdLoadPlan.java:66)
	at org.hibernate.loader.ast.internal.SingleIdEntityLoaderStandardImpl.createLoadPlan(SingleIdEntityLoaderStandardImpl.java:195)
	at org.hibernate.loader.ast.internal.SingleIdEntityLoaderStandardImpl.prepare(SingleIdEntityLoaderStandardImpl.java:54)
	at org.hibernate.persister.entity.AbstractEntityPersister.prepareLoader(AbstractEntityPersister.java:3391)
	at org.hibernate.persister.entity.AbstractEntityPersister.postInstantiate(AbstractEntityPersister.java:3385)
	at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.finishInitialization(MappingMetamodelImpl.java:204)
	at org.hibernate.internal.SessionFactoryImpl.initializeMappingModel(SessionFactoryImpl.java:319)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:269)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:431)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:894)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:913)
	at com.zemoso.hibernate.demo.ReadStudentDemo.main(ReadStudentDemo.java:20)
2023-06-08 14:54:20 => [tree] [DEBUG] SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (s1 : com.zemoso.hibernate.demo.entity.Student) {
          primaryTableReference : student as s1_0
        }
      }
    }

2023-06-08 14:54:20 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.sql.results.jdbc.spi.JdbcValuesMappingProducerProvider]
2023-06-08 14:54:20 => [MetadataContext] [TRACE] Wrapping up metadata context...
2023-06-08 14:54:20 => [MetadataContext] [TRACE] Starting entity [com.zemoso.hibernate.demo.entity.Student]
2023-06-08 14:54:20 => [AttributeFactory] [TRACE] Building identifier attribute [com.zemoso.hibernate.demo.entity.Student.id]
2023-06-08 14:54:20 => [AttributeFactory] [TRACE] Starting attribute metadata determination [id]
2023-06-08 14:54:20 => [AttributeFactory] [TRACE]     Determined member [private int com.zemoso.hibernate.demo.entity.Student.id]
2023-06-08 14:54:20 => [AttributeFactory] [TRACE]     Determined type [name=integer, class=org.hibernate.type.internal.NamedBasicTypeImpl]
2023-06-08 14:54:20 => [AttributeFactory] [TRACE] Building attribute [com.zemoso.hibernate.demo.entity.Student.email]
2023-06-08 14:54:20 => [AttributeFactory] [TRACE] Starting attribute metadata determination [email]
2023-06-08 14:54:20 => [AttributeFactory] [TRACE]     Determined member [private java.lang.String com.zemoso.hibernate.demo.entity.Student.email]
2023-06-08 14:54:20 => [AttributeFactory] [TRACE]     Determined type [name=string, class=org.hibernate.type.internal.NamedBasicTypeImpl]
2023-06-08 14:54:20 => [AttributeFactory] [TRACE] Building attribute [com.zemoso.hibernate.demo.entity.Student.firstName]
2023-06-08 14:54:20 => [AttributeFactory] [TRACE] Starting attribute metadata determination [firstName]
2023-06-08 14:54:20 => [AttributeFactory] [TRACE]     Determined member [private java.lang.String com.zemoso.hibernate.demo.entity.Student.firstName]
2023-06-08 14:54:20 => [AttributeFactory] [TRACE]     Determined type [name=string, class=org.hibernate.type.internal.NamedBasicTypeImpl]
2023-06-08 14:54:20 => [AttributeFactory] [TRACE] Building attribute [com.zemoso.hibernate.demo.entity.Student.lastName]
2023-06-08 14:54:20 => [AttributeFactory] [TRACE] Starting attribute metadata determination [lastName]
2023-06-08 14:54:20 => [AttributeFactory] [TRACE]     Determined member [private java.lang.String com.zemoso.hibernate.demo.entity.Student.lastName]
2023-06-08 14:54:20 => [AttributeFactory] [TRACE]     Determined type [name=string, class=org.hibernate.type.internal.NamedBasicTypeImpl]
2023-06-08 14:54:20 => [AbstractIdentifiableType] [TRACE] Interpreting domain-model identifier descriptor
2023-06-08 14:54:20 => [MetadataContext] [TRACE] Completed entity [com.zemoso.hibernate.demo.entity.Student]
2023-06-08 14:54:20 => [SessionFactoryServiceRegistryImpl] [DEBUG] EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-06-08 14:54:20 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.mutation.spi.MutationExecutorService]
2023-06-08 14:54:20 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.event.spi.EntityCopyObserverFactory]
2023-06-08 14:54:20 => [EntityCopyObserverFactoryInitiator] [DEBUG] Configured EntityCopyObserver strategy: disallow
2023-06-08 14:54:20 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.batch.spi.BatchBuilder]
2023-06-08 14:54:20 => [batch] [TRACE] Using standard BatchBuilder (1)
2023-06-08 14:54:20 => [TypeConfiguration$Scope] [DEBUG] Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@517bd097] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@76bf1bb8]
2023-06-08 14:54:20 => [NamedObjectRepository] [DEBUG] Checking 0 named HQL queries
2023-06-08 14:54:20 => [NamedObjectRepository] [DEBUG] Checking 0 named SQL queries
2023-06-08 14:54:20 => [SchemaManagementToolCoordinator] [DEBUG] No schema actions specified for contributor `orm`; doing nothing
2023-06-08 14:54:20 => [SchemaManagementToolCoordinator] [DEBUG] No actions found; doing nothing
2023-06-08 14:54:20 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jndi.spi.JndiService]
2023-06-08 14:54:20 => [SessionFactoryRegistry] [DEBUG] Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@3b42121d
2023-06-08 14:54:20 => [SessionFactoryRegistry] [DEBUG] Registering SessionFactory: 6c8493d1-f54b-434b-a421-968205a9eab1 (<unnamed>)
2023-06-08 14:54:20 => [SessionFactoryRegistry] [DEBUG] Not binding SessionFactory to JNDI, no JNDI name configured
2023-06-08 14:54:20 => [TypeConfiguration$Scope] [TRACE] Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@76bf1bb8] for TypeConfiguration
2023-06-08 14:54:20 => [SessionFactoryImpl] [DEBUG] Instantiated SessionFactory
2023-06-08 14:54:20 => [SessionFactoryImpl$SessionBuilderImpl] [TRACE] Opening Hibernate Session.  tenant=null
2023-06-08 14:54:20 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.stat.spi.StatisticsImplementor]
2023-06-08 14:54:20 => [StatisticsInitiator] [DEBUG] Statistics initialized [enabled=false]
2023-06-08 14:54:20 => [SessionImpl] [TRACE] Opened Session [7abe8d96-7b2f-4d46-a59e-b34e38410893] at timestamp: 1686216260988
2023-06-08 14:54:20 => [TransactionImpl] [DEBUG] On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-06-08 14:54:21 => [TestJDBC] [INFO] Creating new student object...
2023-06-08 14:54:21 => [ThreadLocalSessionContext] [TRACE] Allowing invocation [beginTransaction] to proceed to real (non-transacted) session
2023-06-08 14:54:21 => [ThreadLocalSessionContext] [TRACE] Allowing proxy invocation [beginTransaction] to proceed to real session
2023-06-08 14:54:21 => [TransactionImpl] [DEBUG] begin
2023-06-08 14:54:21 => [AbstractLogicalConnectionImplementor] [TRACE] Preparing to begin transaction via JDBC Connection.setAutoCommit(false)
2023-06-08 14:54:21 => [AbstractLogicalConnectionImplementor] [TRACE] Transaction begun via JDBC Connection.setAutoCommit(false)
2023-06-08 14:54:21 => [JdbcResourceLocalTransactionCoordinatorImpl] [TRACE] ResourceLocalTransactionCoordinatorImpl#afterBeginCallback
2023-06-08 14:54:21 => [TestJDBC] [INFO] Saving the student...
2023-06-08 14:54:21 => [TestJDBC] [INFO] Student(id=0, firstName=Akash, lastName=Gupta, email=akashzee@gmail.com)
2023-06-08 14:54:21 => [ThreadLocalSessionContext] [TRACE] Allowing proxy invocation [save] to proceed to real session
2023-06-08 14:54:21 => [DefaultSaveOrUpdateEventListener] [TRACE] Saving transient instance
2023-06-08 14:54:21 => [AbstractSaveEventListener] [TRACE] Saving [com.zemoso.hibernate.demo.entity.Student#<null>]
2023-06-08 14:54:21 => [ActionQueue] [TRACE] Adding an EntityIdentityInsertAction for [com.zemoso.hibernate.demo.entity.Student] object
2023-06-08 14:54:21 => [ActionQueue] [TRACE] Executing inserts before finding non-nullable transient entities for early insert: [EntityIdentityInsertAction[com.zemoso.hibernate.demo.entity.Student#<null>]]
2023-06-08 14:54:21 => [ActionQueue] [TRACE] Adding insert with no non-nullable, transient entities: [EntityIdentityInsertAction[com.zemoso.hibernate.demo.entity.Student#<null>]]
2023-06-08 14:54:21 => [ActionQueue] [TRACE] Executing insertions before resolved early-insert
2023-06-08 14:54:21 => [ActionQueue] [DEBUG] Executing identity-insert immediately
2023-06-08 14:54:21 => [SQL] [DEBUG] insert into student (email,first_name,last_name) values (?,?,?)
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Registering statement [com.mysql.cj.jdbc.ClientPreparedStatement: insert into student (email,first_name,last_name) values (** NOT SPECIFIED **,** NOT SPECIFIED **,** NOT SPECIFIED **)]
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Registering result set [null]
2023-06-08 14:54:21 => [bind] [TRACE] binding parameter [1] as [VARCHAR] - [akashzee@gmail.com]
2023-06-08 14:54:21 => [bind] [TRACE] binding parameter [2] as [VARCHAR] - [Akash]
2023-06-08 14:54:21 => [bind] [TRACE] binding parameter [3] as [VARCHAR] - [Gupta]
2023-06-08 14:54:21 => [extract] [TRACE] extracted value ([1] : [INTEGER]) - [10]
2023-06-08 14:54:21 => [IdentifierGeneratorHelper] [DEBUG] Natively generated identity (com.zemoso.hibernate.demo.entity.Student) : 10
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Releasing result set [com.mysql.cj.jdbc.result.ResultSetImpl@626d2016]
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Closing result set [com.mysql.cj.jdbc.result.ResultSetImpl@626d2016]
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Releasing statement [com.mysql.cj.jdbc.ClientPreparedStatement: insert into student (email,first_name,last_name) values ('akashzee@gmail.com','Akash','Gupta')]
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Closing result set [null]
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Closing prepared statement [com.mysql.cj.jdbc.ClientPreparedStatement: insert into student (email,first_name,last_name) values ('akashzee@gmail.com','Akash','Gupta')]
2023-06-08 14:54:21 => [mutation] [TRACE] Post-insert generated value : `10` (com.zemoso.hibernate.demo.entity.Student)
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Releasing statement [com.mysql.cj.jdbc.ClientPreparedStatement: insert into student (email,first_name,last_name) values (** NOT SPECIFIED **,** NOT SPECIFIED **,** NOT SPECIFIED **)]
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [DEBUG] HHH000387: ResultSet's statement was not registered
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Closing prepared statement [com.mysql.cj.jdbc.ClientPreparedStatement: insert into student (email,first_name,last_name) values (** NOT SPECIFIED **,** NOT SPECIFIED **,** NOT SPECIFIED **)]
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [DEBUG] Exception clearing maxRows/queryTimeout [No operations allowed after statement closed.]
2023-06-08 14:54:21 => [ThreadLocalSessionContext] [TRACE] Allowing proxy invocation [getTransaction] to proceed to real session
2023-06-08 14:54:21 => [TransactionImpl] [DEBUG] committing
2023-06-08 14:54:21 => [JdbcResourceLocalTransactionCoordinatorImpl] [TRACE] ResourceLocalTransactionCoordinatorImpl#beforeCompletionCallback
2023-06-08 14:54:21 => [SessionImpl] [TRACE] SessionImpl#beforeTransactionCompletion()
2023-06-08 14:54:21 => [SessionImpl] [TRACE] Automatically flushing session
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [TRACE] Flushing session
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [DEBUG] Processing flush-time cascades
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [DEBUG] Dirty checking collections
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [TRACE] Flushing entities and processing referenced collections
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [TRACE] Processing unreferenced collections
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [TRACE] Scheduling collection removes/(re)creates/updates
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [DEBUG] Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [DEBUG] Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-06-08 14:54:21 => [EntityPrinter] [DEBUG] Listing entities:
2023-06-08 14:54:21 => [EntityPrinter] [DEBUG] com.zemoso.hibernate.demo.entity.Student{firstName=Akash, lastName=Gupta, id=10, email=akashzee@gmail.com}
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [TRACE] Executing flush
2023-06-08 14:54:21 => [JdbcCoordinatorImpl] [TRACE] Starting after statement execution processing [AFTER_TRANSACTION]
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [TRACE] Post flush
2023-06-08 14:54:21 => [AbstractLogicalConnectionImplementor] [TRACE] LogicalConnection#beforeTransactionCompletion
2023-06-08 14:54:21 => [SynchronizationRegistryStandardImpl] [TRACE] SynchronizationRegistryStandardImpl.notifySynchronizationsBeforeTransactionCompletion
2023-06-08 14:54:21 => [AbstractLogicalConnectionImplementor] [TRACE] Preparing to commit transaction via JDBC Connection.commit()
2023-06-08 14:54:21 => [AbstractLogicalConnectionImplementor] [TRACE] Transaction committed via JDBC Connection.commit()
2023-06-08 14:54:21 => [AbstractLogicalConnectionImplementor] [TRACE] LogicalConnection#afterTransaction
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Releasing JDBC resources
2023-06-08 14:54:21 => [LogicalConnectionManagedImpl] [DEBUG] Initiating JDBC connection release from afterTransaction
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Releasing JDBC resources
2023-06-08 14:54:21 => [JdbcResourceLocalTransactionCoordinatorImpl] [TRACE] ResourceLocalTransactionCoordinatorImpl#afterCompletionCallback(true)
2023-06-08 14:54:21 => [SynchronizationRegistryStandardImpl] [TRACE] SynchronizationRegistryStandardImpl.notifySynchronizationsAfterTransactionCompletion(3)
2023-06-08 14:54:21 => [SynchronizationRegistryStandardImpl] [DEBUG] Clearing local Synchronizations
2023-06-08 14:54:21 => [AbstractLogicalConnectionImplementor] [TRACE] LogicalConnection#afterTransaction
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Releasing JDBC resources
2023-06-08 14:54:21 => [LogicalConnectionManagedImpl] [DEBUG] Initiating JDBC connection release from afterTransaction
2023-06-08 14:54:21 => [SessionImpl] [TRACE] SessionImpl#afterTransactionCompletion(successful=true, delayed=false)
2023-06-08 14:54:21 => [SessionImpl] [TRACE] Automatically closing session
2023-06-08 14:54:21 => [SessionImpl] [TRACE] Closing session [7abe8d96-7b2f-4d46-a59e-b34e38410893]
2023-06-08 14:54:21 => [JdbcCoordinatorImpl] [TRACE] Closing JDBC container [org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl@7e7743ec]
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Releasing JDBC resources
2023-06-08 14:54:21 => [LogicalConnectionManagedImpl] [TRACE] Closing logical connection
2023-06-08 14:54:21 => [LogicalConnectionManagedImpl] [TRACE] Logical connection closed
2023-06-08 14:54:21 => [TestJDBC] [INFO] Saved student. Generated id: 10
2023-06-08 14:54:21 => [SessionFactoryImpl$SessionBuilderImpl] [TRACE] Opening Hibernate Session.  tenant=null
2023-06-08 14:54:21 => [SessionImpl] [TRACE] Opened Session [e0e1e734-5260-406b-b736-099ae9e5e167] at timestamp: 1686216261097
2023-06-08 14:54:21 => [TransactionImpl] [DEBUG] On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-06-08 14:54:21 => [ThreadLocalSessionContext] [TRACE] Allowing invocation [beginTransaction] to proceed to real (non-transacted) session
2023-06-08 14:54:21 => [ThreadLocalSessionContext] [TRACE] Allowing proxy invocation [beginTransaction] to proceed to real session
2023-06-08 14:54:21 => [TransactionImpl] [DEBUG] begin
2023-06-08 14:54:21 => [AbstractLogicalConnectionImplementor] [TRACE] Preparing to begin transaction via JDBC Connection.setAutoCommit(false)
2023-06-08 14:54:21 => [AbstractLogicalConnectionImplementor] [TRACE] Transaction begun via JDBC Connection.setAutoCommit(false)
2023-06-08 14:54:21 => [JdbcResourceLocalTransactionCoordinatorImpl] [TRACE] ResourceLocalTransactionCoordinatorImpl#afterBeginCallback
2023-06-08 14:54:21 => [TestJDBC] [INFO] 
Getting student with id: 10
2023-06-08 14:54:21 => [ThreadLocalSessionContext] [TRACE] Allowing proxy invocation [get] to proceed to real session
2023-06-08 14:54:21 => [DefaultLoadEventListener] [TRACE] Loading entity: [com.zemoso.hibernate.demo.entity.Student#10]
2023-06-08 14:54:21 => [DefaultLoadEventListener] [TRACE] Attempting to resolve: [com.zemoso.hibernate.demo.entity.Student#10]
2023-06-08 14:54:21 => [DefaultLoadEventListener] [TRACE] Object not resolved in any cache: [com.zemoso.hibernate.demo.entity.Student#10]
2023-06-08 14:54:21 => [AbstractEntityPersister] [TRACE] Fetching entity: [com.zemoso.hibernate.demo.entity.Student#10]
2023-06-08 14:54:21 => [exec] [DEBUG] Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-06-08 14:54:21 => [results] [TRACE] Registering initializer : EntityResultInitializer(com.zemoso.hibernate.demo.entity.Student)
2023-06-08 14:54:21 => [results] [DEBUG] Initializer list
2023-06-08 14:54:21 => [results] [DEBUG]     com.zemoso.hibernate.demo.entity.Student -> EntityResultInitializer(com.zemoso.hibernate.demo.entity.Student)@438094511 (SingleTableEntityPersister(com.zemoso.hibernate.demo.entity.Student))
2023-06-08 14:54:21 => [DeferredResultSetAccess] [TRACE] Executing query to retrieve ResultSet : select s1_0.id,s1_0.email,s1_0.first_name,s1_0.last_name from student s1_0 where s1_0.id=?
2023-06-08 14:54:21 => [SQL] [DEBUG] select s1_0.id,s1_0.email,s1_0.first_name,s1_0.last_name from student s1_0 where s1_0.id=?
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Registering statement [com.mysql.cj.jdbc.ClientPreparedStatement: select s1_0.id,s1_0.email,s1_0.first_name,s1_0.last_name from student s1_0 where s1_0.id=** NOT SPECIFIED **]
2023-06-08 14:54:21 => [bind] [TRACE] binding parameter [1] as [INTEGER] - [10]
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Registering result set [com.mysql.cj.jdbc.result.ResultSetImpl@2b80e5a9]
2023-06-08 14:54:21 => [AbstractLogicalConnectionImplementor] [TRACE] LogicalConnection#afterStatement
2023-06-08 14:54:21 => [extract] [TRACE] extracted value ([1] : [INTEGER]) - [10]
2023-06-08 14:54:21 => [extract] [TRACE] extracted value ([2] : [VARCHAR]) - [akashzee@gmail.com]
2023-06-08 14:54:21 => [extract] [TRACE] extracted value ([3] : [VARCHAR]) - [Akash]
2023-06-08 14:54:21 => [extract] [TRACE] extracted value ([4] : [VARCHAR]) - [Gupta]
2023-06-08 14:54:21 => [loading] [TRACE] StandardRowReader#readRow
2023-06-08 14:54:21 => [entity] [TRACE] (o.h.s.r.g.e.i.EntityResultInitializer) Beginning Initializer#resolveKey process for entity : com.zemoso.hibernate.demo.entity.Student
2023-06-08 14:54:21 => [entity] [DEBUG] (EntityResultInitializer) Hydrated EntityKey (com.zemoso.hibernate.demo.entity.Student): 10
2023-06-08 14:54:21 => [entity] [TRACE] (o.h.s.r.g.e.i.EntityResultInitializer) Beginning Initializer#resolveInstance process for entity (com.zemoso.hibernate.demo.entity.Student) : 10
2023-06-08 14:54:21 => [entity] [DEBUG] (EntityResultInitializer) Created new entity instance [com.zemoso.hibernate.demo.entity.Student#10] : 757436159
2023-06-08 14:54:21 => [entity] [TRACE] (EntityResultInitializer) Beginning Initializer#initializeInstance process for entity com.zemoso.hibernate.demo.entity.Student#10
2023-06-08 14:54:21 => [results] [DEBUG] Extracted JDBC value [1] - [akashzee@gmail.com]
2023-06-08 14:54:21 => [results] [DEBUG] Extracted JDBC value [2] - [Akash]
2023-06-08 14:54:21 => [results] [DEBUG] Extracted JDBC value [3] - [Gupta]
2023-06-08 14:54:21 => [entity] [DEBUG] (EntityResultInitializer) Done materializing entityInstance : com.zemoso.hibernate.demo.entity.Student#10
2023-06-08 14:54:21 => [loading] [DEBUG] Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@4a058df8
2023-06-08 14:54:21 => [loading] [TRACE] StandardRowReader#afterRow
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Releasing result set [com.mysql.cj.jdbc.result.ResultSetImpl@2b80e5a9]
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Closing result set [com.mysql.cj.jdbc.result.ResultSetImpl@2b80e5a9]
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Releasing statement [com.mysql.cj.jdbc.ClientPreparedStatement: select s1_0.id,s1_0.email,s1_0.first_name,s1_0.last_name from student s1_0 where s1_0.id=10]
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Closing prepared statement [com.mysql.cj.jdbc.ClientPreparedStatement: select s1_0.id,s1_0.email,s1_0.first_name,s1_0.last_name from student s1_0 where s1_0.id=10]
2023-06-08 14:54:21 => [StatefulPersistenceContext] [TRACE] Initializing non-lazy collections
2023-06-08 14:54:21 => [TestJDBC] [INFO] Get complete: Student(id=10, firstName=Akash, lastName=Gupta, email=akashzee@gmail.com)
2023-06-08 14:54:21 => [ThreadLocalSessionContext] [TRACE] Allowing proxy invocation [getTransaction] to proceed to real session
2023-06-08 14:54:21 => [TransactionImpl] [DEBUG] committing
2023-06-08 14:54:21 => [JdbcResourceLocalTransactionCoordinatorImpl] [TRACE] ResourceLocalTransactionCoordinatorImpl#beforeCompletionCallback
2023-06-08 14:54:21 => [SessionImpl] [TRACE] SessionImpl#beforeTransactionCompletion()
2023-06-08 14:54:21 => [SessionImpl] [TRACE] Automatically flushing session
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [TRACE] Flushing session
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [DEBUG] Processing flush-time cascades
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [DEBUG] Dirty checking collections
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [TRACE] Flushing entities and processing referenced collections
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [TRACE] Processing unreferenced collections
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [TRACE] Scheduling collection removes/(re)creates/updates
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [DEBUG] Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [DEBUG] Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-06-08 14:54:21 => [EntityPrinter] [DEBUG] Listing entities:
2023-06-08 14:54:21 => [EntityPrinter] [DEBUG] com.zemoso.hibernate.demo.entity.Student{firstName=Akash, lastName=Gupta, id=10, email=akashzee@gmail.com}
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [TRACE] Executing flush
2023-06-08 14:54:21 => [JdbcCoordinatorImpl] [TRACE] Starting after statement execution processing [AFTER_TRANSACTION]
2023-06-08 14:54:21 => [AbstractFlushingEventListener] [TRACE] Post flush
2023-06-08 14:54:21 => [AbstractLogicalConnectionImplementor] [TRACE] LogicalConnection#beforeTransactionCompletion
2023-06-08 14:54:21 => [SynchronizationRegistryStandardImpl] [TRACE] SynchronizationRegistryStandardImpl.notifySynchronizationsBeforeTransactionCompletion
2023-06-08 14:54:21 => [AbstractLogicalConnectionImplementor] [TRACE] Preparing to commit transaction via JDBC Connection.commit()
2023-06-08 14:54:21 => [AbstractLogicalConnectionImplementor] [TRACE] Transaction committed via JDBC Connection.commit()
2023-06-08 14:54:21 => [AbstractLogicalConnectionImplementor] [TRACE] LogicalConnection#afterTransaction
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Releasing JDBC resources
2023-06-08 14:54:21 => [LogicalConnectionManagedImpl] [DEBUG] Initiating JDBC connection release from afterTransaction
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Releasing JDBC resources
2023-06-08 14:54:21 => [JdbcResourceLocalTransactionCoordinatorImpl] [TRACE] ResourceLocalTransactionCoordinatorImpl#afterCompletionCallback(true)
2023-06-08 14:54:21 => [SynchronizationRegistryStandardImpl] [TRACE] SynchronizationRegistryStandardImpl.notifySynchronizationsAfterTransactionCompletion(3)
2023-06-08 14:54:21 => [SynchronizationRegistryStandardImpl] [DEBUG] Clearing local Synchronizations
2023-06-08 14:54:21 => [AbstractLogicalConnectionImplementor] [TRACE] LogicalConnection#afterTransaction
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Releasing JDBC resources
2023-06-08 14:54:21 => [LogicalConnectionManagedImpl] [DEBUG] Initiating JDBC connection release from afterTransaction
2023-06-08 14:54:21 => [SessionImpl] [TRACE] SessionImpl#afterTransactionCompletion(successful=true, delayed=false)
2023-06-08 14:54:21 => [SessionImpl] [TRACE] Automatically closing session
2023-06-08 14:54:21 => [SessionImpl] [TRACE] Closing session [e0e1e734-5260-406b-b736-099ae9e5e167]
2023-06-08 14:54:21 => [JdbcCoordinatorImpl] [TRACE] Closing JDBC container [org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl@4ea56bdb]
2023-06-08 14:54:21 => [ResourceRegistryStandardImpl] [TRACE] Releasing JDBC resources
2023-06-08 14:54:21 => [LogicalConnectionManagedImpl] [TRACE] Closing logical connection
2023-06-08 14:54:21 => [LogicalConnectionManagedImpl] [TRACE] Logical connection closed
2023-06-08 14:54:21 => [TestJDBC] [INFO] Done!
2023-06-08 14:54:21 => [SessionFactoryImpl] [DEBUG] HHH000031: Closing
2023-06-08 14:54:21 => [AbstractServiceRegistryImpl] [TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider]
2023-06-08 14:54:21 => [TypeConfiguration$Scope] [TRACE] Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@76bf1bb8] for TypeConfiguration
2023-06-08 14:54:21 => [TypeConfiguration$Scope] [DEBUG] Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@108e9837] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@76bf1bb8]
2023-06-08 14:54:21 => [AbstractServiceRegistryImpl] [DEBUG] Implicitly destroying ServiceRegistry on de-registration of all child ServiceRegistries
2023-06-08 14:54:21 => [pooling] [INFO] HHH10001008: Cleaning up connection pool [jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC]
2023-06-08 14:54:21 => [BootstrapServiceRegistryImpl] [DEBUG] Implicitly destroying Boot-strap registry on de-registration of all child ServiceRegistries
